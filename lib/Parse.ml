(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

let debug = ref false

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_swift"

let ts_parser = create_parser ()

let parse_source_string ?src_file contents =
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "comment";
  "multiline_comment";
  "directive";
  "diagnostic";
]

let children_regexps : (string * Run.exp option) list = [
  "semgrep_expression_ellipsis", None;
  "multiline_comment", None;
  "pat_c6c5536", None;
  "extended_regex_literal", None;
  "function_modifier",
  Some (
    Alt [|
      Token (Literal "infix");
      Token (Literal "postfix");
      Token (Literal "prefix");
    |];
  );
  "import_kind",
  Some (
    Alt [|
      Token (Literal "typealias");
      Token (Literal "struct");
      Token (Literal "class");
      Token (Literal "enum");
      Token (Literal "protocol");
      Token (Literal "let");
      Token (Literal "var");
      Token (Literal "func");
    |];
  );
  "pat_c332828", None;
  "pat_97d645c", None;
  "plus_then_ws", None;
  "async_modifier", None;
  "tok_prec_n4_slash", None;
  "hex_literal", None;
  "raw_str_part", None;
  "pat_88eeeaa", None;
  "multi_line_str_text", None;
  "raw_str_continuing_indicator", None;
  "throw_keyword", None;
  "multiline_comment_explicit", Some (Nothing;);
  "semgrep_ellipsis_metavar", None;
  "arrow_operator_custom", None;
  "catch_keyword", None;
  "bitwise_binary_operator",
  Some (
    Alt [|
      Token (Literal "&");
      Token (Literal "|");
      Token (Literal "^");
      Token (Literal "<<");
      Token (Literal ">>");
    |];
  );
  "optionally_valueful_control_keyword",
  Some (
    Alt [|
      Token (Literal "return");
      Token (Literal "continue");
      Token (Literal "break");
      Token (Literal "yield");
    |];
  );
  "where_keyword", None;
  "real_literal", None;
  "pat_888b548", None;
  "comment", None;
  "parameter_ownership_modifier",
  Some (
    Alt [|
      Token (Literal "borrowing");
      Token (Literal "consuming");
    |];
  );
  "pat_f630af3", None;
  "special_literal",
  Some (
    Alt [|
      Token (Literal "#file");
      Token (Literal "#fileID");
      Token (Literal "#filePath");
      Token (Literal "#line");
      Token (Literal "#column");
      Token (Literal "#function");
      Token (Literal "#dsohandle");
    |];
  );
  "async_keyword_custom", None;
  "inheritance_modifier",
  Some (
    Alt [|
      Token (Literal "final");
    |];
  );
  "fake_try_bang", None;
  "rethrows_keyword", None;
  "tok_dollar_pat_88eeeaa", None;
  "bang_custom", None;
  "custom_operator_", None;
  "await_operator", None;
  "immediate_quest", None;
  "imm_tok_qmark", None;
  "as_bang_custom", None;
  "visibility_modifier",
  Some (
    Seq [
      Alt [|
        Token (Literal "public");
        Token (Literal "private");
        Token (Literal "internal");
        Token (Literal "fileprivate");
        Token (Literal "open");
        Token (Literal "package");
      |];
      Opt (
        Seq [
          Token (Literal "(");
          Token (Literal "set");
          Token (Literal ")");
        ];
      );
    ];
  );
  "throws_keyword", None;
  "tok_pat_c201ddc", None;
  "quest", None;
  "comparison_operator",
  Some (
    Alt [|
      Token (Literal "<");
      Token (Literal ">");
      Token (Literal "<=");
      Token (Literal ">=");
    |];
  );
  "value_binding_pattern",
  Some (
    Alt [|
      Token (Literal "var");
      Token (Literal "let");
    |];
  );
  "wildcard_pattern", None;
  "implicit_semi", None;
  "nil_coalescing_operator_custom", None;
  "property_behavior_modifier", None;
  "super_expression",
  Some (
    Seq [
      Token (Literal "super");
    ];
  );
  "imm_tok_bang", None;
  "mutation_modifier",
  Some (
    Alt [|
      Token (Literal "mutating");
      Token (Literal "nonmutating");
    |];
  );
  "diagnostic", None;
  "member_modifier",
  Some (
    Alt [|
      Token (Literal "override");
      Token (Literal "convenience");
      Token (Literal "required");
      Token (Literal "nonisolated");
    |];
  );
  "minus_then_ws", None;
  "explicit_semi", None;
  "semgrep_ellipsis", None;
  "three_dot_operator", None;
  "boolean_literal",
  Some (
    Alt [|
      Token (Literal "true");
      Token (Literal "false");
    |];
  );
  "is_operator", None;
  "escaped_identifier", None;
  "eq_eq_custom", None;
  "oct_literal", None;
  "raw_str_interpolation_start", None;
  "pat_27d7db1", None;
  "property_modifier",
  Some (
    Alt [|
      Token (Literal "static");
      Token (Literal "dynamic");
      Token (Literal "optional");
      Token (Literal "class");
      Token (Literal "distributed");
    |];
  );
  "default_keyword", None;
  "disjunction_operator_custom", None;
  "integer_literal", None;
  "open_ended_range_operator", None;
  "raw_str_end_part", None;
  "else", None;
  "ownership_modifier",
  Some (
    Alt [|
      Token (Literal "weak");
      Token (Literal "unowned");
      Token (Literal "unowned(safe)");
      Token (Literal "unowned(unsafe)");
    |];
  );
  "oneline_regex_literal", None;
  "as_quest_custom", None;
  "eq_custom", None;
  "statement_label", None;
  "dot_custom", None;
  "line_str_text", None;
  "as_custom", None;
  "directive", None;
  "conjunction_operator_custom", None;
  "self_expression", None;
  "bin_literal", None;
  "multiplicative_operator",
  Some (
    Alt [|
      Token (Literal "*");
      Token (Name "tok_prec_n4_slash");
      Token (Literal "%");
    |];
  );
  "arrow_operator",
  Some (
    Token (Name "arrow_operator_custom");
  );
  "uni_character_literal",
  Some (
    Seq [
      Token (Literal "\\");
      Token (Literal "u");
      Token (Name "pat_888b548");
    ];
  );
  "contextual_simple_identifier",
  Some (
    Alt [|
      Token (Literal "actor");
      Token (Literal "async");
      Token (Literal "each");
      Token (Literal "lazy");
      Token (Literal "repeat");
      Token (Literal "package");
      Token (Name "parameter_ownership_modifier");
    |];
  );
  "parameter_modifier",
  Some (
    Alt [|
      Token (Literal "inout");
      Token (Literal "@escaping");
      Token (Literal "@autoclosure");
      Token (Name "parameter_ownership_modifier");
    |];
  );
  "shebang_line",
  Some (
    Seq [
      Token (Literal "#!");
      Token (Name "pat_f630af3");
    ];
  );
  "async_keyword",
  Some (
    Token (Name "async_keyword_custom");
  );
  "bang",
  Some (
    Alt [|
      Token (Name "bang_custom");
      Token (Literal "!");
    |];
  );
  "as_bang", Some (Token (Name "as_bang_custom"););
  "throws",
  Some (
    Alt [|
      Token (Name "throws_keyword");
      Token (Name "rethrows_keyword");
    |];
  );
  "custom_operator",
  Some (
    Alt [|
      Token (Name "tok_pat_c201ddc");
      Token (Name "custom_operator_");
    |];
  );
  "possibly_async_binding_pattern_kind",
  Some (
    Seq [
      Opt (
        Token (Name "async_modifier");
      );
      Token (Name "value_binding_pattern");
    ];
  );
  "nil_coalescing_operator",
  Some (
    Token (Name "nil_coalescing_operator_custom");
  );
  "try_operator_type",
  Some (
    Alt [|
      Token (Name "imm_tok_bang");
      Token (Name "imm_tok_qmark");
    |];
  );
  "modify_specifier",
  Some (
    Seq [
      Opt (
        Token (Name "mutation_modifier");
      );
      Token (Literal "_modify");
    ];
  );
  "setter_specifier",
  Some (
    Seq [
      Opt (
        Token (Name "mutation_modifier");
      );
      Token (Literal "set");
    ];
  );
  "additive_operator",
  Some (
    Alt [|
      Token (Name "plus_then_ws");
      Token (Name "minus_then_ws");
      Token (Literal "+");
      Token (Literal "-");
    |];
  );
  "semi",
  Some (
    Alt [|
      Token (Name "implicit_semi");
      Token (Name "explicit_semi");
    |];
  );
  "eq_eq", Some (Token (Name "eq_eq_custom"););
  "multiline_regex_literal",
  Some (
    Seq [
      Token (Name "pat_c6c5536");
      Token (Name "pat_27d7db1");
    ];
  );
  "disjunction_operator",
  Some (
    Token (Name "disjunction_operator_custom");
  );
  "range_operator",
  Some (
    Alt [|
      Token (Name "open_ended_range_operator");
      Token (Name "three_dot_operator");
    |];
  );
  "locally_permitted_modifier",
  Some (
    Alt [|
      Token (Name "ownership_modifier");
      Token (Name "inheritance_modifier");
      Token (Name "property_behavior_modifier");
    |];
  );
  "as_quest", Some (Token (Name "as_quest_custom"););
  "equal_sign", Some (Token (Name "eq_custom"););
  "dot", Some (Token (Name "dot_custom"););
  "as", Some (Token (Name "as_custom"););
  "conjunction_operator",
  Some (
    Token (Name "conjunction_operator_custom");
  );
  "str_escaped_char",
  Some (
    Alt [|
      Token (Name "escaped_identifier");
      Token (Name "uni_character_literal");
    |];
  );
  "simple_identifier",
  Some (
    Alt [|
      Token (Name "pat_88eeeaa");
      Token (Name "pat_97d645c");
      Token (Name "pat_c332828");
      Token (Name "tok_dollar_pat_88eeeaa");
      Token (Name "contextual_simple_identifier");
    |];
  );
  "non_local_scope_modifier",
  Some (
    Alt [|
      Token (Name "member_modifier");
      Token (Name "visibility_modifier");
      Token (Name "function_modifier");
      Token (Name "mutation_modifier");
      Token (Name "property_modifier");
      Token (Name "parameter_modifier");
    |];
  );
  "parameter_modifiers",
  Some (
    Repeat1 (
      Token (Name "parameter_modifier");
    );
  );
  "postfix_unary_operator",
  Some (
    Alt [|
      Token (Literal "++");
      Token (Literal "--");
      Token (Name "bang");
    |];
  );
  "getter_effects",
  Some (
    Repeat1 (
      Alt [|
        Token (Name "async_keyword");
        Token (Name "throws");
      |];
    );
  );
  "try_operator",
  Some (
    Seq [
      Token (Literal "try");
      Alt [|
        Opt (
          Token (Name "try_operator_type");
        );
        Token (Name "fake_try_bang");
      |];
    ];
  );
  "class_member_separator",
  Some (
    Alt [|
      Token (Name "semi");
      Token (Name "multiline_comment_explicit");
    |];
  );
  "equality_operator",
  Some (
    Alt [|
      Token (Literal "!=");
      Token (Literal "!==");
      Token (Name "eq_eq");
      Token (Literal "===");
    |];
  );
  "regex_literal",
  Some (
    Alt [|
      Token (Name "extended_regex_literal");
      Token (Name "multiline_regex_literal");
      Token (Name "oneline_regex_literal");
    |];
  );
  "assignment_and_operator",
  Some (
    Alt [|
      Token (Literal "+=");
      Token (Literal "-=");
      Token (Literal "*=");
      Token (Literal "/=");
      Token (Literal "%=");
      Token (Name "equal_sign");
    |];
  );
  "prefix_unary_operator",
  Some (
    Alt [|
      Token (Literal "++");
      Token (Literal "--");
      Token (Literal "-");
      Token (Literal "+");
      Token (Name "bang");
      Token (Literal "&");
      Token (Literal "~");
      Token (Name "dot");
      Token (Name "custom_operator");
    |];
  );
  "as_operator",
  Some (
    Alt [|
      Token (Name "as");
      Token (Name "as_quest");
      Token (Name "as_bang");
    |];
  );
  "multi_line_string_content",
  Some (
    Alt [|
      Token (Name "multi_line_str_text");
      Token (Name "str_escaped_char");
      Token (Literal "\"");
    |];
  );
  "line_string_content",
  Some (
    Alt [|
      Token (Name "line_str_text");
      Token (Name "str_escaped_char");
    |];
  );
  "bound_identifier",
  Some (
    Token (Name "simple_identifier");
  );
  "precedence_group_attribute",
  Some (
    Seq [
      Token (Name "simple_identifier");
      Token (Literal ":");
      Alt [|
        Token (Name "simple_identifier");
        Token (Name "boolean_literal");
      |];
    ];
  );
  "identifier",
  Some (
    Seq [
      Token (Name "simple_identifier");
      Repeat (
        Seq [
          Token (Name "dot");
          Token (Name "simple_identifier");
        ];
      );
    ];
  );
  "navigation_suffix",
  Some (
    Alt [|
      Seq [
        Token (Name "dot");
        Alt [|
          Token (Name "simple_identifier");
          Token (Name "integer_literal");
        |];
      ];
      Seq [
        Token (Name "dot");
        Token (Name "semgrep_ellipsis");
      ];
    |];
  );
  "tuple_type_item_identifier",
  Some (
    Seq [
      Opt (
        Token (Name "wildcard_pattern");
      );
      Token (Name "simple_identifier");
      Token (Literal ":");
    ];
  );
  "value_argument_label",
  Some (
    Alt [|
      Token (Name "simple_identifier");
      Token (Literal "if");
      Token (Literal "switch");
    |];
  );
  "getter_specifier",
  Some (
    Seq [
      Opt (
        Token (Name "mutation_modifier");
      );
      Token (Literal "get");
      Opt (
        Token (Name "getter_effects");
      );
    ];
  );
  "referenceable_operator",
  Some (
    Alt [|
      Token (Name "custom_operator");
      Token (Name "comparison_operator");
      Token (Name "additive_operator");
      Token (Name "multiplicative_operator");
      Token (Name "equality_operator");
      Token (Name "assignment_and_operator");
      Token (Literal "++");
      Token (Literal "--");
      Token (Name "bang");
      Token (Literal "~");
      Token (Literal "|");
      Token (Literal "^");
      Token (Literal "<<");
      Token (Literal ">>");
      Token (Literal "&");
    |];
  );
  "precedence_group_attributes",
  Some (
    Repeat1 (
      Token (Name "precedence_group_attribute");
    );
  );
  "availability_argument",
  Some (
    Alt [|
      Seq [
        Token (Name "identifier");
        Token (Name "integer_literal");
        Repeat (
          Seq [
            Token (Literal ".");
            Token (Name "integer_literal");
          ];
        );
      ];
      Token (Literal "*");
    |];
  );
  "protocol_property_requirements",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "getter_specifier");
          Token (Name "setter_specifier");
        |];
      );
      Token (Literal "}");
    ];
  );
  "non_constructor_function_decl",
  Some (
    Seq [
      Token (Literal "func");
      Alt [|
        Token (Name "simple_identifier");
        Token (Name "referenceable_operator");
      |];
    ];
  );
  "precedence_group_declaration",
  Some (
    Seq [
      Token (Literal "precedencegroup");
      Token (Name "simple_identifier");
      Token (Literal "{");
      Opt (
        Token (Name "precedence_group_attributes");
      );
      Token (Literal "}");
    ];
  );
  "availability_condition",
  Some (
    Seq [
      Alt [|
        Token (Literal "#available");
        Token (Literal "#unavailable");
      |];
      Token (Literal "(");
      Token (Name "availability_argument");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "availability_argument");
        ];
      );
      Token (Literal ")");
    ];
  );
  "additive_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "additive_operator");
      Token (Name "expression");
    ];
  );
  "annotated_inheritance_specifier",
  Some (
    Seq [
      Repeat (
        Token (Name "attribute");
      );
      Token (Name "inheritance_specifier");
    ];
  );
  "array_literal",
  Some (
    Seq [
      Token (Literal "[");
      Opt (
        Seq [
          Token (Name "expression");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "expression");
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal "]");
    ];
  );
  "array_type",
  Some (
    Seq [
      Token (Literal "[");
      Token (Name "type");
      Token (Literal "]");
    ];
  );
  "as_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "as_operator");
      Token (Name "type");
    ];
  );
  "assignment",
  Some (
    Seq [
      Token (Name "directly_assignable_expression");
      Token (Name "assignment_and_operator");
      Token (Name "expression");
    ];
  );
  "associatedtype_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Literal "associatedtype");
      Token (Name "simple_identifier");
      Opt (
        Seq [
          Token (Literal ":");
          Token (Name "type");
        ];
      );
      Opt (
        Token (Name "type_constraints");
      );
      Opt (
        Seq [
          Token (Name "equal_sign");
          Token (Name "type");
        ];
      );
    ];
  );
  "attribute",
  Some (
    Seq [
      Token (Literal "@");
      Token (Name "user_type");
      Opt (
        Seq [
          Token (Literal "(");
          Token (Name "attribute_argument");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "attribute_argument");
            ];
          );
          Token (Literal ")");
        ];
      );
    ];
  );
  "attribute_argument",
  Some (
    Alt [|
      Seq [
        Token (Name "simple_identifier");
        Token (Literal ":");
        Token (Name "expression");
      ];
      Token (Name "expression");
      Repeat1 (
        Seq [
          Token (Name "simple_identifier");
          Token (Literal ":");
        ];
      );
      Seq [
        Repeat1 (
          Token (Name "simple_identifier");
        );
        Token (Name "integer_literal");
        Repeat (
          Seq [
            Token (Literal ".");
            Token (Name "integer_literal");
          ];
        );
      ];
    |];
  );
  "await_expression",
  Some (
    Seq [
      Token (Name "await_operator");
      Alt [|
        Token (Name "expression");
        Token (Name "call_expression");
        Token (Name "ternary_expression");
      |];
    ];
  );
  "basic_literal",
  Some (
    Alt [|
      Token (Name "integer_literal");
      Token (Name "hex_literal");
      Token (Name "oct_literal");
      Token (Name "bin_literal");
      Token (Name "real_literal");
      Token (Name "boolean_literal");
      Token (Name "string_literal");
      Token (Name "regex_literal");
      Token (Literal "nil");
    |];
  );
  "binary_expression",
  Some (
    Alt [|
      Token (Name "multiplicative_expression");
      Token (Name "additive_expression");
      Token (Name "range_expression");
      Token (Name "infix_expression");
      Token (Name "nil_coalescing_expression");
      Token (Name "check_expression");
      Token (Name "equality_expression");
      Token (Name "comparison_expression");
      Token (Name "conjunction_expression");
      Token (Name "disjunction_expression");
      Token (Name "bitwise_operation");
    |];
  );
  "binding_kind_and_pattern",
  Some (
    Seq [
      Token (Name "possibly_async_binding_pattern_kind");
      Token (Name "no_expr_pattern_already_bound");
    ];
  );
  "binding_pattern",
  Some (
    Seq [
      Opt (
        Token (Literal "case");
      );
      Token (Name "value_binding_pattern");
      Token (Name "no_expr_pattern_already_bound");
    ];
  );
  "binding_pattern_no_expr",
  Some (
    Seq [
      Alt [|
        Token (Name "universally_allowed_pattern");
        Token (Name "binding_pattern");
        Token (Name "bound_identifier");
      |];
      Opt (
        Token (Name "quest");
      );
    ];
  );
  "binding_pattern_with_expr",
  Some (
    Seq [
      Alt [|
        Token (Name "universally_allowed_pattern");
        Token (Name "binding_pattern");
        Token (Name "expression");
      |];
      Opt (
        Token (Name "quest");
      );
    ];
  );
  "bitwise_operation",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "bitwise_binary_operator");
      Token (Name "expr_hack_at_ternary_binary_suffix");
    ];
  );
  "block",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Token (Name "statements");
      );
      Token (Literal "}");
    ];
  );
  "bodyless_function_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Opt (
        Token (Literal "class");
      );
      Token (Name "modifierless_function_declaration_no_body");
    ];
  );
  "call_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "call_suffix");
    ];
  );
  "call_suffix",
  Some (
    Alt [|
      Token (Name "value_arguments");
      Token (Name "fn_call_lambda_arguments");
      Seq [
        Token (Name "value_arguments");
        Token (Name "fn_call_lambda_arguments");
      ];
    |];
  );
  "capture_list",
  Some (
    Seq [
      Token (Literal "[");
      Token (Name "capture_list_item");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "capture_list_item");
        ];
      );
      Token (Literal "]");
    ];
  );
  "capture_list_item",
  Some (
    Alt [|
      Token (Name "self_expression");
      Seq [
        Opt (
          Token (Name "ownership_modifier");
        );
        Token (Name "simple_identifier");
        Opt (
          Seq [
            Token (Name "equal_sign");
            Token (Name "expression");
          ];
        );
      ];
    |];
  );
  "case_pattern",
  Some (
    Seq [
      Opt (
        Token (Literal "case");
      );
      Opt (
        Token (Name "user_type");
      );
      Token (Name "dot");
      Token (Name "simple_identifier");
      Opt (
        Token (Name "tuple_pattern");
      );
    ];
  );
  "catch_block",
  Some (
    Seq [
      Token (Name "catch_keyword");
      Opt (
        Token (Name "binding_pattern_no_expr");
      );
      Opt (
        Token (Name "where_clause");
      );
      Token (Name "block");
    ];
  );
  "check_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "is_operator");
      Token (Name "type");
    ];
  );
  "class_body",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Token (Name "class_member_declarations");
      );
      Token (Literal "}");
    ];
  );
  "class_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Name "modifierless_class_declaration");
    ];
  );
  "class_member_declarations",
  Some (
    Seq [
      Token (Name "type_level_declaration");
      Repeat (
        Seq [
          Token (Name "class_member_separator");
          Token (Name "type_level_declaration");
        ];
      );
      Opt (
        Token (Name "class_member_separator");
      );
    ];
  );
  "comparison_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "comparison_operator");
      Token (Name "expr_hack_at_ternary_binary_suffix");
    ];
  );
  "computed_getter",
  Some (
    Seq [
      Repeat (
        Token (Name "attribute");
      );
      Token (Name "getter_specifier");
      Opt (
        Token (Name "block");
      );
    ];
  );
  "computed_modify",
  Some (
    Seq [
      Repeat (
        Token (Name "attribute");
      );
      Token (Name "modify_specifier");
      Opt (
        Token (Name "block");
      );
    ];
  );
  "computed_property",
  Some (
    Seq [
      Token (Literal "{");
      Alt [|
        Opt (
          Token (Name "statements");
        );
        Repeat (
          Alt [|
            Token (Name "computed_getter");
            Token (Name "computed_setter");
            Token (Name "computed_modify");
          |];
        );
      |];
      Token (Literal "}");
    ];
  );
  "computed_setter",
  Some (
    Seq [
      Repeat (
        Token (Name "attribute");
      );
      Token (Name "setter_specifier");
      Opt (
        Seq [
          Token (Literal "(");
          Token (Name "simple_identifier");
          Token (Literal ")");
        ];
      );
      Opt (
        Token (Name "block");
      );
    ];
  );
  "conjunction_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "conjunction_operator");
      Token (Name "expr_hack_at_ternary_binary_suffix");
    ];
  );
  "constrained_type",
  Some (
    Alt [|
      Token (Name "identifier");
      Seq [
        Token (Name "unannotated_type");
        Opt (
          Seq [
            Token (Literal ".");
            Token (Name "simple_identifier");
            Repeat (
              Seq [
                Token (Literal ".");
                Token (Name "simple_identifier");
              ];
            );
          ];
        );
      ];
    |];
  );
  "constructor_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "array_type");
        Token (Name "dictionary_type");
        Token (Name "user_type");
      |];
      Token (Name "constructor_suffix");
    ];
  );
  "constructor_suffix",
  Some (
    Alt [|
      Token (Name "constructor_value_arguments");
      Token (Name "fn_call_lambda_arguments");
      Seq [
        Token (Name "constructor_value_arguments");
        Token (Name "fn_call_lambda_arguments");
      ];
    |];
  );
  "constructor_value_arguments",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "value_argument");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "value_argument");
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "control_transfer_statement",
  Some (
    Alt [|
      Token (Name "throw_statement");
      Seq [
        Token (Name "optionally_valueful_control_keyword");
        Opt (
          Token (Name "expression");
        );
      ];
    |];
  );
  "deinit_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Literal "deinit");
      Token (Name "function_body");
    ];
  );
  "deprecated_operator_declaration_body",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "simple_identifier");
          Token (Name "basic_literal");
        |];
      );
      Token (Literal "}");
    ];
  );
  "dictionary_literal",
  Some (
    Seq [
      Token (Literal "[");
      Alt [|
        Token (Literal ":");
        Seq [
          Token (Name "dictionary_literal_item");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "dictionary_literal_item");
            ];
          );
        ];
      |];
      Opt (
        Token (Literal ",");
      );
      Token (Literal "]");
    ];
  );
  "dictionary_literal_item",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal ":");
      Token (Name "expression");
    ];
  );
  "dictionary_type",
  Some (
    Seq [
      Token (Literal "[");
      Token (Name "type");
      Token (Literal ":");
      Token (Name "type");
      Token (Literal "]");
    ];
  );
  "didset_clause",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Literal "didSet");
      Opt (
        Seq [
          Token (Literal "(");
          Token (Name "simple_identifier");
          Token (Literal ")");
        ];
      );
      Token (Name "block");
    ];
  );
  "direct_or_indirect_binding",
  Some (
    Seq [
      Alt [|
        Token (Name "binding_kind_and_pattern");
        Seq [
          Token (Literal "case");
          Token (Name "binding_pattern_no_expr");
        ];
      |];
      Opt (
        Token (Name "type_annotation");
      );
    ];
  );
  "directly_assignable_expression",
  Some (
    Token (Name "expression");
  );
  "disjunction_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "disjunction_operator");
      Token (Name "expr_hack_at_ternary_binary_suffix");
    ];
  );
  "do_statement",
  Some (
    Seq [
      Token (Literal "do");
      Token (Name "block");
      Repeat (
        Token (Name "catch_block");
      );
    ];
  );
  "else_options",
  Some (
    Alt [|
      Token (Name "block");
      Token (Name "if_statement");
    |];
  );
  "enum_class_body",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "enum_entry");
          Token (Name "type_level_declaration");
        |];
      );
      Token (Literal "}");
    ];
  );
  "enum_entry",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Opt (
        Token (Literal "indirect");
      );
      Token (Literal "case");
      Token (Name "simple_identifier");
      Opt (
        Token (Name "enum_entry_suffix");
      );
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "simple_identifier");
          Opt (
            Token (Name "enum_entry_suffix");
          );
        ];
      );
      Opt (
        Token (Literal ";");
      );
    ];
  );
  "enum_entry_suffix",
  Some (
    Alt [|
      Token (Name "enum_type_parameters");
      Seq [
        Token (Name "equal_sign");
        Token (Name "expression");
      ];
    |];
  );
  "enum_type_parameters",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Opt (
            Seq [
              Opt (
                Token (Name "wildcard_pattern");
              );
              Token (Name "simple_identifier");
              Token (Literal ":");
            ];
          );
          Token (Name "type");
          Opt (
            Seq [
              Token (Name "equal_sign");
              Token (Name "expression");
            ];
          );
          Repeat (
            Seq [
              Token (Literal ",");
              Opt (
                Seq [
                  Opt (
                    Token (Name "wildcard_pattern");
                  );
                  Token (Name "simple_identifier");
                  Token (Literal ":");
                ];
              );
              Token (Name "type");
              Opt (
                Seq [
                  Token (Name "equal_sign");
                  Token (Name "expression");
                ];
              );
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "equality_constraint",
  Some (
    Seq [
      Repeat (
        Token (Name "attribute");
      );
      Token (Name "constrained_type");
      Alt [|
        Token (Name "equal_sign");
        Token (Name "eq_eq");
      |];
      Token (Name "type");
    ];
  );
  "equality_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "equality_operator");
      Token (Name "expr_hack_at_ternary_binary_suffix");
    ];
  );
  "existential_type",
  Some (
    Seq [
      Token (Literal "any");
      Token (Name "unannotated_type");
    ];
  );
  "expr_hack_at_ternary_binary_call",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "expr_hack_at_ternary_binary_call_suffix");
    ];
  );
  "expr_hack_at_ternary_binary_call_suffix",
  Some (
    Token (Name "value_arguments");
  );
  "expr_hack_at_ternary_binary_suffix",
  Some (
    Alt [|
      Token (Name "expression");
      Token (Name "expr_hack_at_ternary_binary_call");
    |];
  );
  "expression",
  Some (
    Alt [|
      Alt [|
        Token (Name "simple_identifier");
        Token (Name "unary_expression");
        Token (Name "binary_expression");
        Token (Name "ternary_expression");
        Token (Name "primary_expression");
        Token (Name "if_statement");
        Token (Name "switch_statement");
        Token (Name "assignment");
        Token (Name "value_parameter_pack");
        Token (Name "value_pack_expansion");
        Seq [
          Token (Name "expression");
          Token (Name "immediate_quest");
        ];
      |];
      Token (Name "semgrep_expression_ellipsis");
      Token (Name "semgrep_ellipsis_metavar");
      Token (Name "semgrep_deep_ellipsis");
    |];
  );
  "expression_with_willset_didset",
  Some (
    Seq [
      Token (Name "equal_sign");
      Token (Name "expression");
      Token (Name "willset_didset_block");
    ];
  );
  "expression_without_willset_didset",
  Some (
    Seq [
      Token (Name "equal_sign");
      Token (Name "expression");
    ];
  );
  "fn_call_lambda_arguments",
  Some (
    Seq [
      Token (Name "lambda_literal");
      Repeat (
        Seq [
          Token (Name "simple_identifier");
          Token (Literal ":");
          Token (Name "lambda_literal");
        ];
      );
    ];
  );
  "for_statement",
  Some (
    Seq [
      Token (Literal "for");
      Opt (
        Token (Name "try_operator");
      );
      Opt (
        Token (Name "await_operator");
      );
      Token (Name "binding_pattern_no_expr");
      Opt (
        Token (Name "type_annotation");
      );
      Token (Literal "in");
      Token (Name "for_statement_collection");
      Opt (
        Token (Name "where_clause");
      );
      Token (Name "block");
    ];
  );
  "for_statement_await",
  Some (
    Seq [
      Token (Name "await_operator");
      Token (Name "expression");
    ];
  );
  "for_statement_collection",
  Some (
    Alt [|
      Token (Name "expression");
      Token (Name "for_statement_await");
    |];
  );
  "function_body", Some (Token (Name "block"););
  "function_declaration",
  Some (
    Seq [
      Token (Name "bodyless_function_declaration");
      Token (Name "function_body");
    ];
  );
  "function_type",
  Some (
    Seq [
      Alt [|
        Token (Name "tuple_type");
        Token (Name "unannotated_type");
      |];
      Opt (
        Token (Name "async_keyword");
      );
      Opt (
        Token (Name "throws");
      );
      Token (Name "arrow_operator");
      Token (Name "type");
    ];
  );
  "function_value_parameter",
  Some (
    Seq [
      Opt (
        Token (Name "attribute");
      );
      Token (Name "parameter");
      Opt (
        Seq [
          Token (Name "equal_sign");
          Token (Name "expression");
        ];
      );
    ];
  );
  "function_value_parameters",
  Some (
    Repeat1 (
      Seq [
        Token (Literal "(");
        Opt (
          Seq [
            Token (Name "function_value_parameter");
            Repeat (
              Seq [
                Token (Literal ",");
                Token (Name "function_value_parameter");
              ];
            );
          ];
        );
        Token (Literal ")");
      ];
    );
  );
  "guard_statement",
  Some (
    Seq [
      Token (Literal "guard");
      Token (Name "if_condition_sequence_item");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "if_condition_sequence_item");
        ];
      );
      Token (Name "else");
      Token (Name "block");
    ];
  );
  "if_condition_sequence_item",
  Some (
    Alt [|
      Token (Name "if_let_binding");
      Token (Name "expression");
      Token (Name "availability_condition");
    |];
  );
  "if_let_binding",
  Some (
    Seq [
      Token (Name "direct_or_indirect_binding");
      Opt (
        Seq [
          Token (Name "equal_sign");
          Token (Name "expression");
        ];
      );
      Opt (
        Token (Name "where_clause");
      );
    ];
  );
  "if_statement",
  Some (
    Seq [
      Token (Literal "if");
      Token (Name "if_condition_sequence_item");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "if_condition_sequence_item");
        ];
      );
      Token (Name "block");
      Opt (
        Seq [
          Token (Name "else");
          Token (Name "else_options");
        ];
      );
    ];
  );
  "import_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Literal "import");
      Opt (
        Token (Name "import_kind");
      );
      Token (Name "identifier");
    ];
  );
  "infix_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "custom_operator");
      Token (Name "expr_hack_at_ternary_binary_suffix");
    ];
  );
  "inheritance_constraint",
  Some (
    Seq [
      Repeat (
        Token (Name "attribute");
      );
      Token (Name "constrained_type");
      Token (Literal ":");
      Token (Name "possibly_implicitly_unwrapped_type");
    ];
  );
  "inheritance_specifier",
  Some (
    Alt [|
      Token (Name "user_type");
      Token (Name "function_type");
    |];
  );
  "inheritance_specifiers",
  Some (
    Seq [
      Token (Name "annotated_inheritance_specifier");
      Repeat (
        Seq [
          Alt [|
            Token (Literal ",");
            Token (Literal "&");
          |];
          Token (Name "annotated_inheritance_specifier");
        ];
      );
    ];
  );
  "init_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Opt (
        Token (Literal "class");
      );
      Token (Literal "init");
      Opt (
        Alt [|
          Token (Name "quest");
          Token (Name "bang");
        |];
      );
      Opt (
        Token (Name "type_parameters");
      );
      Token (Name "function_value_parameters");
      Opt (
        Token (Name "async_keyword");
      );
      Opt (
        Token (Name "throws");
      );
      Opt (
        Token (Name "type_constraints");
      );
      Opt (
        Token (Name "function_body");
      );
    ];
  );
  "interpolation",
  Some (
    Seq [
      Token (Literal "\\(");
      Token (Name "interpolation_contents");
      Token (Literal ")");
    ];
  );
  "interpolation_contents",
  Some (
    Seq [
      Token (Name "value_argument");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "value_argument");
        ];
      );
    ];
  );
  "key_path_component",
  Some (
    Alt [|
      Seq [
        Token (Name "simple_identifier");
        Repeat (
          Token (Name "key_path_postfixes");
        );
      ];
      Repeat1 (
        Token (Name "key_path_postfixes");
      );
    |];
  );
  "key_path_expression",
  Some (
    Seq [
      Token (Literal "\\");
      Opt (
        Alt [|
          Token (Name "simple_user_type");
          Token (Name "array_type");
          Token (Name "dictionary_type");
        |];
      );
      Repeat (
        Seq [
          Token (Literal ".");
          Token (Name "key_path_component");
        ];
      );
    ];
  );
  "key_path_postfixes",
  Some (
    Alt [|
      Token (Literal "?");
      Token (Name "bang");
      Token (Literal "self");
      Seq [
        Token (Literal "[");
        Opt (
          Seq [
            Token (Name "value_argument");
            Repeat (
              Seq [
                Token (Literal ",");
                Token (Name "value_argument");
              ];
            );
          ];
        );
        Token (Literal "]");
      ];
    |];
  );
  "key_path_string_expression",
  Some (
    Seq [
      Token (Literal "#keyPath");
      Token (Literal "(");
      Token (Name "expression");
      Token (Literal ")");
    ];
  );
  "labeled_statement",
  Some (
    Seq [
      Opt (
        Token (Name "statement_label");
      );
      Alt [|
        Token (Name "for_statement");
        Token (Name "while_statement");
        Token (Name "repeat_while_statement");
        Token (Name "do_statement");
        Token (Name "if_statement");
        Token (Name "guard_statement");
        Token (Name "switch_statement");
      |];
    ];
  );
  "lambda_function_type",
  Some (
    Seq [
      Alt [|
        Token (Name "lambda_function_type_parameters");
        Seq [
          Token (Literal "(");
          Opt (
            Token (Name "lambda_function_type_parameters");
          );
          Token (Literal ")");
        ];
      |];
      Opt (
        Token (Name "async_keyword");
      );
      Opt (
        Token (Name "throws");
      );
      Opt (
        Seq [
          Token (Name "arrow_operator");
          Token (Name "possibly_implicitly_unwrapped_type");
        ];
      );
    ];
  );
  "lambda_function_type_parameters",
  Some (
    Seq [
      Token (Name "lambda_parameter");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "lambda_parameter");
        ];
      );
    ];
  );
  "lambda_literal",
  Some (
    Seq [
      Alt [|
        Token (Literal "{");
        Token (Literal "^{");
      |];
      Opt (
        Token (Name "lambda_type_declaration");
      );
      Opt (
        Token (Name "statements");
      );
      Token (Literal "}");
    ];
  );
  "lambda_parameter",
  Some (
    Seq [
      Alt [|
        Token (Name "self_expression");
        Token (Name "simple_identifier");
        Seq [
          Opt (
            Token (Name "simple_identifier");
          );
          Token (Name "simple_identifier");
          Token (Literal ":");
          Opt (
            Token (Name "parameter_modifiers");
          );
          Token (Name "possibly_implicitly_unwrapped_type");
        ];
      |];
    ];
  );
  "lambda_type_declaration",
  Some (
    Seq [
      Repeat (
        Token (Name "attribute");
      );
      Opt (
        Token (Name "capture_list");
      );
      Opt (
        Token (Name "lambda_function_type");
      );
      Token (Literal "in");
    ];
  );
  "line_string_literal",
  Some (
    Seq [
      Token (Literal "\"");
      Repeat (
        Alt [|
          Token (Name "line_string_content");
          Token (Name "interpolation");
        |];
      );
      Token (Literal "\"");
    ];
  );
  "local_class_declaration",
  Some (
    Seq [
      Opt (
        Repeat1 (
          Alt [|
            Token (Name "attribute");
            Token (Name "locally_permitted_modifier");
          |];
        );
      );
      Token (Name "modifierless_class_declaration");
    ];
  );
  "local_declaration",
  Some (
    Alt [|
      Token (Name "local_property_declaration");
      Token (Name "local_typealias_declaration");
      Token (Name "local_function_declaration");
      Token (Name "local_class_declaration");
    |];
  );
  "local_function_declaration",
  Some (
    Seq [
      Opt (
        Repeat1 (
          Alt [|
            Token (Name "attribute");
            Token (Name "locally_permitted_modifier");
          |];
        );
      );
      Token (Name "modifierless_function_declaration");
    ];
  );
  "local_property_declaration",
  Some (
    Seq [
      Opt (
        Repeat1 (
          Alt [|
            Token (Name "attribute");
            Token (Name "locally_permitted_modifier");
          |];
        );
      );
      Token (Name "modifierless_property_declaration");
    ];
  );
  "local_statement",
  Some (
    Alt [|
      Token (Name "expression");
      Token (Name "local_declaration");
      Token (Name "labeled_statement");
      Token (Name "control_transfer_statement");
    |];
  );
  "local_typealias_declaration",
  Some (
    Seq [
      Opt (
        Repeat1 (
          Alt [|
            Token (Name "attribute");
            Token (Name "locally_permitted_modifier");
          |];
        );
      );
      Token (Name "modifierless_typealias_declaration");
    ];
  );
  "metatype",
  Some (
    Seq [
      Token (Name "unannotated_type");
      Token (Literal ".");
      Alt [|
        Token (Literal "Type");
        Token (Literal "Protocol");
      |];
    ];
  );
  "modifierless_class_declaration",
  Some (
    Alt [|
      Seq [
        Alt [|
          Token (Literal "class");
          Token (Literal "struct");
          Token (Literal "actor");
        |];
        Token (Name "simple_identifier");
        Opt (
          Token (Name "type_parameters");
        );
        Opt (
          Seq [
            Token (Literal ":");
            Token (Name "inheritance_specifiers");
          ];
        );
        Opt (
          Token (Name "type_constraints");
        );
        Token (Name "class_body");
      ];
      Seq [
        Token (Literal "extension");
        Token (Name "unannotated_type");
        Opt (
          Token (Name "type_parameters");
        );
        Opt (
          Seq [
            Token (Literal ":");
            Token (Name "inheritance_specifiers");
          ];
        );
        Opt (
          Token (Name "type_constraints");
        );
        Token (Name "class_body");
      ];
      Seq [
        Opt (
          Token (Literal "indirect");
        );
        Token (Literal "enum");
        Token (Name "simple_identifier");
        Opt (
          Token (Name "type_parameters");
        );
        Opt (
          Seq [
            Token (Literal ":");
            Token (Name "inheritance_specifiers");
          ];
        );
        Opt (
          Token (Name "type_constraints");
        );
        Token (Name "enum_class_body");
      ];
    |];
  );
  "modifierless_function_declaration",
  Some (
    Seq [
      Token (Name "modifierless_function_declaration_no_body");
      Token (Name "function_body");
    ];
  );
  "modifierless_function_declaration_no_body",
  Some (
    Seq [
      Token (Name "non_constructor_function_decl");
      Opt (
        Token (Name "type_parameters");
      );
      Token (Name "function_value_parameters");
      Opt (
        Token (Name "async_keyword");
      );
      Opt (
        Token (Name "throws");
      );
      Opt (
        Seq [
          Token (Name "arrow_operator");
          Token (Name "possibly_implicitly_unwrapped_type");
        ];
      );
      Opt (
        Token (Name "type_constraints");
      );
    ];
  );
  "modifierless_property_declaration",
  Some (
    Seq [
      Token (Name "possibly_async_binding_pattern_kind");
      Token (Name "single_modifierless_property_declaration");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "single_modifierless_property_declaration");
        ];
      );
    ];
  );
  "modifierless_typealias_declaration",
  Some (
    Seq [
      Token (Literal "typealias");
      Token (Name "simple_identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Token (Name "equal_sign");
      Token (Name "type");
    ];
  );
  "modifiers",
  Some (
    Repeat1 (
      Alt [|
        Token (Name "non_local_scope_modifier");
        Repeat1 (
          Alt [|
            Token (Name "attribute");
            Token (Name "locally_permitted_modifier");
          |];
        );
      |];
    );
  );
  "multi_line_string_literal",
  Some (
    Seq [
      Token (Literal "\"\"\"");
      Repeat (
        Alt [|
          Token (Name "multi_line_string_content");
          Token (Name "interpolation");
        |];
      );
      Token (Literal "\"\"\"");
    ];
  );
  "multiplicative_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "multiplicative_operator");
      Token (Name "expression");
    ];
  );
  "navigable_type_expression",
  Some (
    Alt [|
      Token (Name "user_type");
      Token (Name "array_type");
      Token (Name "dictionary_type");
    |];
  );
  "navigation_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "navigable_type_expression");
        Token (Name "expression");
        Token (Name "parenthesized_type");
      |];
      Token (Name "navigation_suffix");
    ];
  );
  "nil_coalescing_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "nil_coalescing_operator");
      Token (Name "expr_hack_at_ternary_binary_suffix");
    ];
  );
  "no_expr_pattern_already_bound",
  Some (
    Seq [
      Alt [|
        Token (Name "universally_allowed_pattern");
        Token (Name "bound_identifier");
      |];
      Opt (
        Token (Name "quest");
      );
    ];
  );
  "opaque_type",
  Some (
    Seq [
      Token (Literal "some");
      Token (Name "unannotated_type");
    ];
  );
  "open_end_range_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "three_dot_operator");
    ];
  );
  "open_start_range_expression",
  Some (
    Seq [
      Token (Name "range_operator");
      Token (Name "expression");
    ];
  );
  "operator_declaration",
  Some (
    Seq [
      Alt [|
        Token (Literal "prefix");
        Token (Literal "infix");
        Token (Literal "postfix");
      |];
      Token (Literal "operator");
      Token (Name "referenceable_operator");
      Opt (
        Seq [
          Token (Literal ":");
          Token (Name "simple_identifier");
        ];
      );
      Opt (
        Token (Name "deprecated_operator_declaration_body");
      );
    ];
  );
  "optional_type",
  Some (
    Seq [
      Alt [|
        Token (Name "user_type");
        Token (Name "tuple_type");
        Token (Name "array_type");
        Token (Name "dictionary_type");
      |];
      Repeat1 (
        Token (Name "immediate_quest");
      );
    ];
  );
  "parameter",
  Some (
    Alt [|
      Seq [
        Opt (
          Token (Name "simple_identifier");
        );
        Token (Name "simple_identifier");
        Token (Literal ":");
        Opt (
          Token (Name "parameter_modifiers");
        );
        Token (Name "possibly_implicitly_unwrapped_type");
        Opt (
          Token (Name "three_dot_operator");
        );
      ];
      Token (Name "semgrep_ellipsis");
      Token (Name "semgrep_ellipsis_metavar");
    |];
  );
  "parenthesized_type",
  Some (
    Seq [
      Token (Literal "(");
      Alt [|
        Token (Name "opaque_type");
        Token (Name "existential_type");
        Token (Name "dictionary_type");
      |];
      Token (Literal ")");
    ];
  );
  "playground_literal",
  Some (
    Seq [
      Alt [|
        Token (Literal "#colorLiteral");
        Token (Literal "#fileLiteral");
        Token (Literal "#imageLiteral");
      |];
      Token (Literal "(");
      Token (Name "simple_identifier");
      Token (Literal ":");
      Token (Name "expression");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "simple_identifier");
          Token (Literal ":");
          Token (Name "expression");
        ];
      );
      Token (Literal ")");
    ];
  );
  "possibly_implicitly_unwrapped_type",
  Some (
    Seq [
      Token (Name "type");
      Opt (
        Token (Name "imm_tok_bang");
      );
    ];
  );
  "postfix_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "postfix_unary_operator");
    ];
  );
  "prefix_expression",
  Some (
    Seq [
      Token (Name "prefix_unary_operator");
      Alt [|
        Token (Name "expression");
        Alt [|
          Token (Literal "async");
          Token (Literal "if");
          Token (Literal "switch");
        |];
      |];
    ];
  );
  "primary_expression",
  Some (
    Alt [|
      Token (Name "tuple_expression");
      Token (Name "basic_literal");
      Token (Name "lambda_literal");
      Token (Name "special_literal");
      Token (Name "playground_literal");
      Token (Name "array_literal");
      Token (Name "dictionary_literal");
      Token (Name "self_expression");
      Token (Name "super_expression");
      Token (Name "try_expression");
      Token (Name "await_expression");
      Token (Name "referenceable_operator");
      Token (Name "key_path_expression");
      Token (Name "key_path_string_expression");
      Token (Name "three_dot_operator");
    |];
  );
  "property_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Name "modifierless_property_declaration");
    ];
  );
  "protocol_body",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Token (Name "protocol_member_declarations");
      );
      Token (Literal "}");
    ];
  );
  "protocol_composition_type",
  Some (
    Seq [
      Token (Name "unannotated_type");
      Repeat1 (
        Seq [
          Token (Literal "&");
          Token (Name "unannotated_type");
        ];
      );
    ];
  );
  "protocol_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Literal "protocol");
      Token (Name "simple_identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Opt (
        Seq [
          Token (Literal ":");
          Token (Name "inheritance_specifiers");
        ];
      );
      Opt (
        Token (Name "type_constraints");
      );
      Token (Name "protocol_body");
    ];
  );
  "protocol_member_declaration",
  Some (
    Alt [|
      Seq [
        Token (Name "bodyless_function_declaration");
        Opt (
          Token (Name "function_body");
        );
      ];
      Token (Name "init_declaration");
      Token (Name "deinit_declaration");
      Token (Name "protocol_property_declaration");
      Token (Name "typealias_declaration");
      Token (Name "associatedtype_declaration");
      Token (Name "subscript_declaration");
    |];
  );
  "protocol_member_declarations",
  Some (
    Seq [
      Token (Name "protocol_member_declaration");
      Repeat (
        Seq [
          Token (Name "semi");
          Token (Name "protocol_member_declaration");
        ];
      );
      Opt (
        Token (Name "semi");
      );
    ];
  );
  "protocol_property_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Name "binding_kind_and_pattern");
      Opt (
        Token (Name "type_annotation");
      );
      Opt (
        Token (Name "type_constraints");
      );
      Token (Name "protocol_property_requirements");
    ];
  );
  "range_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "range_operator");
      Token (Name "expr_hack_at_ternary_binary_suffix");
    ];
  );
  "raw_str_interpolation",
  Some (
    Seq [
      Token (Name "raw_str_interpolation_start");
      Token (Name "interpolation_contents");
      Token (Literal ")");
    ];
  );
  "raw_string_literal",
  Some (
    Seq [
      Repeat (
        Seq [
          Token (Name "raw_str_part");
          Token (Name "raw_str_interpolation");
          Opt (
            Token (Name "raw_str_continuing_indicator");
          );
        ];
      );
      Token (Name "raw_str_end_part");
    ];
  );
  "repeat_while_statement",
  Some (
    Seq [
      Token (Literal "repeat");
      Token (Literal "{");
      Opt (
        Token (Name "statements");
      );
      Token (Literal "}");
      Repeat (
        Token (Name "implicit_semi");
      );
      Token (Literal "while");
      Token (Name "if_condition_sequence_item");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "if_condition_sequence_item");
        ];
      );
    ];
  );
  "selector_expression",
  Some (
    Seq [
      Token (Literal "#selector");
      Token (Literal "(");
      Opt (
        Alt [|
          Token (Literal "getter:");
          Token (Literal "setter:");
        |];
      );
      Token (Name "expression");
      Token (Literal ")");
    ];
  );
  "semgrep_deep_ellipsis",
  Some (
    Seq [
      Token (Literal "<...");
      Token (Name "expression");
      Token (Name "custom_operator");
    ];
  );
  "simple_user_type",
  Some (
    Seq [
      Token (Name "simple_identifier");
      Opt (
        Token (Name "type_arguments");
      );
    ];
  );
  "single_modifierless_property_declaration",
  Some (
    Seq [
      Token (Name "no_expr_pattern_already_bound");
      Opt (
        Token (Name "type_annotation");
      );
      Opt (
        Token (Name "type_constraints");
      );
      Opt (
        Alt [|
          Token (Name "expression_with_willset_didset");
          Token (Name "expression_without_willset_didset");
          Token (Name "willset_didset_block");
          Token (Name "computed_property");
        |];
      );
    ];
  );
  "statements",
  Some (
    Seq [
      Token (Name "local_statement");
      Repeat (
        Seq [
          Token (Name "semi");
          Token (Name "local_statement");
        ];
      );
      Opt (
        Token (Name "semi");
      );
    ];
  );
  "string_literal",
  Some (
    Alt [|
      Token (Name "line_string_literal");
      Token (Name "multi_line_string_literal");
      Token (Name "raw_string_literal");
    |];
  );
  "subscript_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Literal "subscript");
      Opt (
        Token (Name "type_parameters");
      );
      Token (Name "function_value_parameters");
      Opt (
        Seq [
          Token (Name "arrow_operator");
          Token (Name "possibly_implicitly_unwrapped_type");
        ];
      );
      Opt (
        Token (Name "type_constraints");
      );
      Token (Name "computed_property");
    ];
  );
  "switch_entry",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Alt [|
        Seq [
          Token (Literal "case");
          Token (Name "switch_pattern");
          Opt (
            Seq [
              Token (Name "where_keyword");
              Token (Name "expression");
            ];
          );
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "switch_pattern");
            ];
          );
        ];
        Token (Name "default_keyword");
      |];
      Token (Literal ":");
      Token (Name "statements");
      Opt (
        Token (Literal "fallthrough");
      );
    ];
  );
  "switch_pattern",
  Some (
    Token (Name "binding_pattern_with_expr");
  );
  "switch_statement",
  Some (
    Seq [
      Token (Literal "switch");
      Token (Name "expression");
      Token (Literal "{");
      Repeat (
        Token (Name "switch_entry");
      );
      Token (Literal "}");
    ];
  );
  "ternary_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "quest");
      Token (Name "expression");
      Token (Literal ":");
      Token (Name "expr_hack_at_ternary_binary_suffix");
    ];
  );
  "throw_statement",
  Some (
    Seq [
      Token (Name "throw_keyword");
      Token (Name "expression");
    ];
  );
  "try_expression",
  Some (
    Seq [
      Token (Name "try_operator");
      Alt [|
        Token (Name "expression");
        Token (Name "binary_expression");
        Token (Name "call_expression");
        Token (Name "ternary_expression");
      |];
    ];
  );
  "tuple_expression",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "simple_identifier");
          Token (Literal ":");
        ];
      );
      Token (Name "expression");
      Repeat (
        Seq [
          Token (Literal ",");
          Opt (
            Seq [
              Token (Name "simple_identifier");
              Token (Literal ":");
            ];
          );
          Token (Name "expression");
        ];
      );
      Token (Literal ")");
    ];
  );
  "tuple_pattern",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "tuple_pattern_item");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "tuple_pattern_item");
        ];
      );
      Token (Literal ")");
    ];
  );
  "tuple_pattern_item",
  Some (
    Alt [|
      Seq [
        Token (Name "simple_identifier");
        Token (Literal ":");
        Token (Name "binding_pattern_with_expr");
      ];
      Token (Name "binding_pattern_with_expr");
    |];
  );
  "tuple_type",
  Some (
    Alt [|
      Seq [
        Token (Literal "(");
        Opt (
          Seq [
            Token (Name "tuple_type_item");
            Repeat (
              Seq [
                Token (Literal ",");
                Token (Name "tuple_type_item");
              ];
            );
          ];
        );
        Token (Literal ")");
      ];
      Token (Name "parenthesized_type");
    |];
  );
  "tuple_type_item",
  Some (
    Seq [
      Opt (
        Token (Name "tuple_type_item_identifier");
      );
      Opt (
        Token (Name "parameter_modifiers");
      );
      Token (Name "type");
    ];
  );
  "type",
  Some (
    Alt [|
      Seq [
        Opt (
          Token (Name "type_modifiers");
        );
        Token (Name "unannotated_type");
      ];
      Token (Name "semgrep_ellipsis");
    |];
  );
  "type_annotation",
  Some (
    Seq [
      Token (Literal ":");
      Token (Name "possibly_implicitly_unwrapped_type");
    ];
  );
  "type_arguments",
  Some (
    Seq [
      Token (Literal "<");
      Token (Name "type");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "type");
        ];
      );
      Token (Literal ">");
    ];
  );
  "type_casting_pattern",
  Some (
    Alt [|
      Seq [
        Token (Literal "is");
        Token (Name "type");
      ];
      Seq [
        Token (Name "binding_pattern_no_expr");
        Token (Name "as");
        Token (Name "type");
      ];
    |];
  );
  "type_constraint",
  Some (
    Alt [|
      Token (Name "inheritance_constraint");
      Token (Name "equality_constraint");
    |];
  );
  "type_constraints",
  Some (
    Seq [
      Token (Name "where_keyword");
      Token (Name "type_constraint");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "type_constraint");
        ];
      );
    ];
  );
  "type_level_declaration",
  Some (
    Alt [|
      Alt [|
        Token (Name "import_declaration");
        Token (Name "property_declaration");
        Token (Name "typealias_declaration");
        Token (Name "function_declaration");
        Token (Name "init_declaration");
        Token (Name "class_declaration");
        Token (Name "protocol_declaration");
        Token (Name "deinit_declaration");
        Token (Name "subscript_declaration");
        Token (Name "operator_declaration");
        Token (Name "precedence_group_declaration");
        Token (Name "associatedtype_declaration");
      |];
      Token (Name "semgrep_ellipsis");
    |];
  );
  "type_modifiers",
  Some (
    Repeat1 (
      Token (Name "attribute");
    );
  );
  "type_pack_expansion",
  Some (
    Seq [
      Token (Literal "repeat");
      Token (Name "unannotated_type");
    ];
  );
  "type_parameter",
  Some (
    Alt [|
      Seq [
        Opt (
          Token (Name "type_parameter_modifiers");
        );
        Token (Name "type_parameter_possibly_packed");
        Opt (
          Seq [
            Token (Literal ":");
            Token (Name "type");
          ];
        );
      ];
      Token (Name "semgrep_ellipsis");
    |];
  );
  "type_parameter_modifiers",
  Some (
    Repeat1 (
      Token (Name "attribute");
    );
  );
  "type_parameter_pack",
  Some (
    Seq [
      Token (Literal "each");
      Token (Name "unannotated_type");
    ];
  );
  "type_parameter_possibly_packed",
  Some (
    Alt [|
      Token (Name "simple_identifier");
      Token (Name "type_parameter_pack");
    |];
  );
  "type_parameters",
  Some (
    Seq [
      Token (Literal "<");
      Token (Name "type_parameter");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "type_parameter");
        ];
      );
      Opt (
        Token (Name "type_constraints");
      );
      Token (Literal ">");
    ];
  );
  "typealias_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Name "modifierless_typealias_declaration");
    ];
  );
  "unannotated_type",
  Some (
    Alt [|
      Token (Name "user_type");
      Token (Name "tuple_type");
      Token (Name "function_type");
      Token (Name "array_type");
      Token (Name "dictionary_type");
      Token (Name "optional_type");
      Token (Name "metatype");
      Token (Name "opaque_type");
      Token (Name "existential_type");
      Token (Name "protocol_composition_type");
      Token (Name "type_parameter_pack");
      Token (Name "type_pack_expansion");
    |];
  );
  "unary_expression",
  Some (
    Alt [|
      Token (Name "postfix_expression");
      Token (Name "call_expression");
      Token (Name "constructor_expression");
      Token (Name "navigation_expression");
      Token (Name "prefix_expression");
      Token (Name "as_expression");
      Token (Name "selector_expression");
      Token (Name "open_start_range_expression");
      Token (Name "open_end_range_expression");
    |];
  );
  "universally_allowed_pattern",
  Some (
    Alt [|
      Token (Name "wildcard_pattern");
      Token (Name "tuple_pattern");
      Token (Name "type_casting_pattern");
      Token (Name "case_pattern");
    |];
  );
  "user_type",
  Some (
    Seq [
      Token (Name "simple_user_type");
      Repeat (
        Seq [
          Token (Name "dot");
          Token (Name "simple_user_type");
        ];
      );
    ];
  );
  "value_argument",
  Some (
    Seq [
      Opt (
        Token (Name "type_modifiers");
      );
      Alt [|
        Repeat1 (
          Seq [
            Token (Name "value_argument_label");
            Token (Literal ":");
          ];
        );
        Seq [
          Opt (
            Seq [
              Token (Name "value_argument_label");
              Token (Literal ":");
            ];
          );
          Token (Name "expression");
        ];
      |];
    ];
  );
  "value_arguments",
  Some (
    Seq [
      Alt [|
        Seq [
          Token (Literal "(");
          Opt (
            Seq [
              Token (Name "value_argument");
              Repeat (
                Seq [
                  Token (Literal ",");
                  Token (Name "value_argument");
                ];
              );
            ];
          );
          Token (Literal ")");
        ];
        Seq [
          Token (Literal "[");
          Opt (
            Seq [
              Token (Name "value_argument");
              Repeat (
                Seq [
                  Token (Literal ",");
                  Token (Name "value_argument");
                ];
              );
            ];
          );
          Token (Literal "]");
        ];
      |];
    ];
  );
  "value_pack_expansion",
  Some (
    Seq [
      Token (Literal "repeat");
      Token (Name "expression");
    ];
  );
  "value_parameter_pack",
  Some (
    Seq [
      Token (Literal "each");
      Token (Name "expression");
    ];
  );
  "where_clause",
  Some (
    Seq [
      Token (Name "where_keyword");
      Token (Name "expression");
    ];
  );
  "while_statement",
  Some (
    Seq [
      Token (Literal "while");
      Token (Name "if_condition_sequence_item");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "if_condition_sequence_item");
        ];
      );
      Token (Literal "{");
      Opt (
        Token (Name "statements");
      );
      Token (Literal "}");
    ];
  );
  "willset_clause",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Literal "willSet");
      Opt (
        Seq [
          Token (Literal "(");
          Token (Name "simple_identifier");
          Token (Literal ")");
        ];
      );
      Token (Name "block");
    ];
  );
  "willset_didset_block",
  Some (
    Alt [|
      Seq [
        Token (Literal "{");
        Token (Name "willset_clause");
        Opt (
          Token (Name "didset_clause");
        );
        Token (Literal "}");
      ];
      Seq [
        Token (Literal "{");
        Token (Name "didset_clause");
        Opt (
          Token (Name "willset_clause");
        );
        Token (Literal "}");
      ];
    |];
  );
  "external_macro_definition",
  Some (
    Seq [
      Token (Literal "#externalMacro");
      Token (Name "value_arguments");
    ];
  );
  "macro_signature",
  Some (
    Seq [
      Token (Name "function_value_parameters");
      Opt (
        Seq [
          Token (Name "arrow_operator");
          Token (Name "unannotated_type");
        ];
      );
    ];
  );
  "macro_head",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Literal "macro");
    ];
  );
  "macro_definition",
  Some (
    Seq [
      Token (Name "equal_sign");
      Alt [|
        Token (Name "expression");
        Token (Name "external_macro_definition");
      |];
    ];
  );
  "macro_declaration",
  Some (
    Seq [
      Token (Name "macro_head");
      Token (Name "simple_identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Token (Name "macro_signature");
      Opt (
        Token (Name "macro_definition");
      );
      Opt (
        Token (Name "type_constraints");
      );
    ];
  );
  "global_declaration",
  Some (
    Alt [|
      Token (Name "import_declaration");
      Token (Name "property_declaration");
      Token (Name "typealias_declaration");
      Token (Name "function_declaration");
      Token (Name "init_declaration");
      Token (Name "class_declaration");
      Token (Name "protocol_declaration");
      Token (Name "operator_declaration");
      Token (Name "precedence_group_declaration");
      Token (Name "associatedtype_declaration");
      Token (Name "macro_declaration");
    |];
  );
  "top_level_statement",
  Some (
    Alt [|
      Token (Name "expression");
      Token (Name "global_declaration");
      Token (Name "labeled_statement");
      Token (Name "throw_statement");
    |];
  );
  "source_file",
  Some (
    Seq [
      Opt (
        Token (Name "shebang_line");
      );
      Opt (
        Seq [
          Token (Name "top_level_statement");
          Repeat (
            Seq [
              Token (Name "semi");
              Token (Name "top_level_statement");
            ];
          );
          Opt (
            Token (Name "semi");
          );
        ];
      );
    ];
  );
]

let trans_semgrep_expression_ellipsis ((kind, body) : mt) : CST.semgrep_expression_ellipsis =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_multiline_comment ((kind, body) : mt) : CST.multiline_comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_c6c5536 ((kind, body) : mt) : CST.pat_c6c5536 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_extended_regex_literal ((kind, body) : mt) : CST.extended_regex_literal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_function_modifier ((kind, body) : mt) : CST.function_modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Infix (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Post (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Prefix (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_import_kind ((kind, body) : mt) : CST.import_kind =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Typeas (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Struct (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Class (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Enum (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Prot (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Let (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Var (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Func (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_pat_c332828 ((kind, body) : mt) : CST.pat_c332828 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_97d645c ((kind, body) : mt) : CST.pat_97d645c =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_plus_then_ws ((kind, body) : mt) : CST.plus_then_ws =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_async_modifier ((kind, body) : mt) : CST.async_modifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_prec_n4_slash ((kind, body) : mt) : CST.tok_prec_n4_slash =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_hex_literal ((kind, body) : mt) : CST.hex_literal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_raw_str_part ((kind, body) : mt) : CST.raw_str_part =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_88eeeaa ((kind, body) : mt) : CST.pat_88eeeaa =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_multi_line_str_text ((kind, body) : mt) : CST.multi_line_str_text =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_raw_str_continuing_indicator ((kind, body) : mt) : CST.raw_str_continuing_indicator =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_throw_keyword ((kind, body) : mt) : CST.throw_keyword =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_multiline_comment_explicit ((kind, body) : mt) : CST.multiline_comment_explicit =
  match body with
  | Children v ->
      Run.nothing v
  | Leaf _ -> assert false

let trans_semgrep_ellipsis_metavar ((kind, body) : mt) : CST.semgrep_ellipsis_metavar =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_arrow_operator_custom ((kind, body) : mt) : CST.arrow_operator_custom =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_catch_keyword ((kind, body) : mt) : CST.catch_keyword =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_bitwise_binary_operator ((kind, body) : mt) : CST.bitwise_binary_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `AMP (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `BAR (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `HAT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `LTLT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `GTGT (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_optionally_valueful_control_keyword ((kind, body) : mt) : CST.optionally_valueful_control_keyword =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Ret (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Cont (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Brk (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Yield (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_where_keyword ((kind, body) : mt) : CST.where_keyword =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_real_literal ((kind, body) : mt) : CST.real_literal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_888b548 ((kind, body) : mt) : CST.pat_888b548 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_comment ((kind, body) : mt) : CST.comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_parameter_ownership_modifier ((kind, body) : mt) : CST.parameter_ownership_modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Borr (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Cons (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_pat_f630af3 ((kind, body) : mt) : CST.pat_f630af3 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_special_literal ((kind, body) : mt) : CST.special_literal =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `HASH_36725ee (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `HASH_ee0b998 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `HASH_bd759bd (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `HASH_709af6a (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `HASH_be35129 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `HASH_96a7ced (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `HASH_4d47dbe (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_async_keyword_custom ((kind, body) : mt) : CST.async_keyword_custom =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_inheritance_modifier ((kind, body) : mt) : CST.inheritance_modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Final (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_fake_try_bang ((kind, body) : mt) : CST.fake_try_bang =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_rethrows_keyword ((kind, body) : mt) : CST.rethrows_keyword =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_dollar_pat_88eeeaa ((kind, body) : mt) : CST.tok_dollar_pat_88eeeaa =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_bang_custom ((kind, body) : mt) : CST.bang_custom =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_custom_operator_ ((kind, body) : mt) : CST.custom_operator_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_await_operator ((kind, body) : mt) : CST.await_operator =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_immediate_quest ((kind, body) : mt) : CST.immediate_quest =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_qmark ((kind, body) : mt) : CST.imm_tok_qmark =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_as_bang_custom ((kind, body) : mt) : CST.as_bang_custom =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_visibility_modifier ((kind, body) : mt) : CST.visibility_modifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Public (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Priv (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Inte (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `File (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Open (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Pack (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1),
                      Run.trans_token (Run.matcher_token v2)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_throws_keyword ((kind, body) : mt) : CST.throws_keyword =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_pat_c201ddc ((kind, body) : mt) : CST.tok_pat_c201ddc =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_quest ((kind, body) : mt) : CST.quest =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_comparison_operator ((kind, body) : mt) : CST.comparison_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `LT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `GT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `LTEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `GTEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_value_binding_pattern ((kind, body) : mt) : CST.value_binding_pattern =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Var (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Let (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_wildcard_pattern ((kind, body) : mt) : CST.wildcard_pattern =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_implicit_semi ((kind, body) : mt) : CST.implicit_semi =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_nil_coalescing_operator_custom ((kind, body) : mt) : CST.nil_coalescing_operator_custom =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_property_behavior_modifier ((kind, body) : mt) : CST.property_behavior_modifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_super_expression ((kind, body) : mt) : CST.super_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0] ->
          (Run.trans_token (Run.matcher_token v0))
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_imm_tok_bang ((kind, body) : mt) : CST.imm_tok_bang =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_mutation_modifier ((kind, body) : mt) : CST.mutation_modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Muta (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Nonm (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_diagnostic ((kind, body) : mt) : CST.diagnostic =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_member_modifier ((kind, body) : mt) : CST.member_modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Over (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Conv (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Requ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Noni (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_minus_then_ws ((kind, body) : mt) : CST.minus_then_ws =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_explicit_semi ((kind, body) : mt) : CST.explicit_semi =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_semgrep_ellipsis ((kind, body) : mt) : CST.semgrep_ellipsis =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_three_dot_operator ((kind, body) : mt) : CST.three_dot_operator =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_boolean_literal ((kind, body) : mt) : CST.boolean_literal =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `True (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `False (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_is_operator ((kind, body) : mt) : CST.is_operator =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_escaped_identifier ((kind, body) : mt) : CST.escaped_identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_eq_eq_custom ((kind, body) : mt) : CST.eq_eq_custom =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_oct_literal ((kind, body) : mt) : CST.oct_literal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_raw_str_interpolation_start ((kind, body) : mt) : CST.raw_str_interpolation_start =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_27d7db1 ((kind, body) : mt) : CST.pat_27d7db1 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_property_modifier ((kind, body) : mt) : CST.property_modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Static (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Dyna (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Opt (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Class (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Dist (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_default_keyword ((kind, body) : mt) : CST.default_keyword =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_disjunction_operator_custom ((kind, body) : mt) : CST.disjunction_operator_custom =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_integer_literal ((kind, body) : mt) : CST.integer_literal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_open_ended_range_operator ((kind, body) : mt) : CST.open_ended_range_operator =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_raw_str_end_part ((kind, body) : mt) : CST.raw_str_end_part =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_else_ ((kind, body) : mt) : CST.else_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_ownership_modifier ((kind, body) : mt) : CST.ownership_modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Weak (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Unow_7c8c304 (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Unow_e455cde (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Unow_8fda70e (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_oneline_regex_literal ((kind, body) : mt) : CST.oneline_regex_literal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_as_quest_custom ((kind, body) : mt) : CST.as_quest_custom =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_eq_custom ((kind, body) : mt) : CST.eq_custom =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_statement_label ((kind, body) : mt) : CST.statement_label =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_dot_custom ((kind, body) : mt) : CST.dot_custom =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_line_str_text ((kind, body) : mt) : CST.line_str_text =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_as_custom ((kind, body) : mt) : CST.as_custom =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_directive ((kind, body) : mt) : CST.directive =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_conjunction_operator_custom ((kind, body) : mt) : CST.conjunction_operator_custom =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_self_expression ((kind, body) : mt) : CST.self_expression =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_bin_literal ((kind, body) : mt) : CST.bin_literal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_multiplicative_operator ((kind, body) : mt) : CST.multiplicative_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `STAR (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Tok_prec_n4_slash (
            trans_tok_prec_n4_slash (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `PERC (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_arrow_operator ((kind, body) : mt) : CST.arrow_operator =
  match body with
  | Children v ->
      trans_arrow_operator_custom (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_uni_character_literal ((kind, body) : mt) : CST.uni_character_literal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_pat_888b548 (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_contextual_simple_identifier ((kind, body) : mt) : CST.contextual_simple_identifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Actor (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Async (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Each (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Lazy (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Repeat (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Pack (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Param_owne_modi (
            trans_parameter_ownership_modifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_parameter_modifier ((kind, body) : mt) : CST.parameter_modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Inout (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `ATes (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `ATau (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Param_owne_modi (
            trans_parameter_ownership_modifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_shebang_line ((kind, body) : mt) : CST.shebang_line =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_pat_f630af3 (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_async_keyword ((kind, body) : mt) : CST.async_keyword =
  match body with
  | Children v ->
      trans_async_keyword_custom (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_bang ((kind, body) : mt) : CST.bang =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Bang_custom (
            trans_bang_custom (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `BANG (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_as_bang ((kind, body) : mt) : CST.as_bang =
  match body with
  | Children v ->
      trans_as_bang_custom (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_throws ((kind, body) : mt) : CST.throws =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Throws_kw (
            trans_throws_keyword (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Rethrs_kw (
            trans_rethrows_keyword (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_custom_operator ((kind, body) : mt) : CST.custom_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Tok_pat_c201ddc (
            trans_tok_pat_c201ddc (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Custom_op_ (
            trans_custom_operator_ (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_possibly_async_binding_pattern_kind ((kind, body) : mt) : CST.possibly_async_binding_pattern_kind =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_async_modifier (Run.matcher_token v))
              v0
            ,
            trans_value_binding_pattern (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_nil_coalescing_operator ((kind, body) : mt) : CST.nil_coalescing_operator =
  match body with
  | Children v ->
      trans_nil_coalescing_operator_custom (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_try_operator_type ((kind, body) : mt) : CST.try_operator_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Imm_tok_bang (
            trans_imm_tok_bang (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Imm_tok_qmark (
            trans_imm_tok_qmark (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_modify_specifier ((kind, body) : mt) : CST.modify_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_mutation_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_setter_specifier ((kind, body) : mt) : CST.setter_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_mutation_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_additive_operator ((kind, body) : mt) : CST.additive_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Plus_then_ws (
            trans_plus_then_ws (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Minus_then_ws (
            trans_minus_then_ws (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `PLUS (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `DASH (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_semi ((kind, body) : mt) : CST.semi =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Impl_semi (
            trans_implicit_semi (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Expl_semi (
            trans_explicit_semi (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_eq_eq ((kind, body) : mt) : CST.eq_eq =
  match body with
  | Children v ->
      trans_eq_eq_custom (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_multiline_regex_literal ((kind, body) : mt) : CST.multiline_regex_literal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_c6c5536 (Run.matcher_token v0),
            trans_pat_27d7db1 (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_disjunction_operator ((kind, body) : mt) : CST.disjunction_operator =
  match body with
  | Children v ->
      trans_disjunction_operator_custom (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_range_operator ((kind, body) : mt) : CST.range_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Open_ended_range_op (
            trans_open_ended_range_operator (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Three_dot_op (
            trans_three_dot_operator (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_locally_permitted_modifier ((kind, body) : mt) : CST.locally_permitted_modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Owne_modi (
            trans_ownership_modifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Inhe_modi (
            trans_inheritance_modifier (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Prop_beha_modi (
            trans_property_behavior_modifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_as_quest ((kind, body) : mt) : CST.as_quest =
  match body with
  | Children v ->
      trans_as_quest_custom (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_equal_sign ((kind, body) : mt) : CST.equal_sign =
  match body with
  | Children v ->
      trans_eq_custom (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_dot ((kind, body) : mt) : CST.dot =
  match body with
  | Children v ->
      trans_dot_custom (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_as_ ((kind, body) : mt) : CST.as_ =
  match body with
  | Children v ->
      trans_as_custom (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_conjunction_operator ((kind, body) : mt) : CST.conjunction_operator =
  match body with
  | Children v ->
      trans_conjunction_operator_custom (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_str_escaped_char ((kind, body) : mt) : CST.str_escaped_char =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Esca_id (
            trans_escaped_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Uni_char_lit (
            trans_uni_character_literal (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_simple_identifier ((kind, body) : mt) : CST.simple_identifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_88eeeaa (
            trans_pat_88eeeaa (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_97d645c (
            trans_pat_97d645c (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Pat_c332828 (
            trans_pat_c332828 (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Tok_dollar_pat_88eeeaa (
            trans_tok_dollar_pat_88eeeaa (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Cont_simple_id (
            trans_contextual_simple_identifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_non_local_scope_modifier ((kind, body) : mt) : CST.non_local_scope_modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Member_modi (
            trans_member_modifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Visi_modi (
            trans_visibility_modifier (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Func_modi (
            trans_function_modifier (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Muta_modi (
            trans_mutation_modifier (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Prop_modi (
            trans_property_modifier (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Param_modi (
            trans_parameter_modifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_parameter_modifiers ((kind, body) : mt) : CST.parameter_modifiers =
  match body with
  | Children v ->
      Run.repeat1
        (fun v -> trans_parameter_modifier (Run.matcher_token v))
        v
  | Leaf _ -> assert false

let trans_postfix_unary_operator ((kind, body) : mt) : CST.postfix_unary_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `PLUSPLUS (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `DASHDASH (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Bang (
            trans_bang (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_getter_effects ((kind, body) : mt) : CST.getter_effects =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Async_kw (
                trans_async_keyword (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `Throws (
                trans_throws (Run.matcher_token v)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

let trans_try_operator ((kind, body) : mt) : CST.try_operator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Opt_try_op_type (
                  Run.opt
                    (fun v -> trans_try_operator_type (Run.matcher_token v))
                    v
                )
            | Alt (1, v) ->
                `Fake_try_bang (
                  trans_fake_try_bang (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_class_member_separator ((kind, body) : mt) : CST.class_member_separator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semi (
            trans_semi (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Mult_comm_expl (
            trans_multiline_comment_explicit (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_equality_operator ((kind, body) : mt) : CST.equality_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `BANGEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `BANGEQEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Eq_eq (
            trans_eq_eq (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `EQEQEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_regex_literal ((kind, body) : mt) : CST.regex_literal =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exte_regex_lit (
            trans_extended_regex_literal (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Mult_regex_lit (
            trans_multiline_regex_literal (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Onel_regex_lit (
            trans_oneline_regex_literal (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_assignment_and_operator ((kind, body) : mt) : CST.assignment_and_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `PLUSEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `DASHEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `STAREQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `SLASHEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `PERCEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Equal_sign (
            trans_equal_sign (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_prefix_unary_operator ((kind, body) : mt) : CST.prefix_unary_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `PLUSPLUS (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `DASHDASH (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `DASH (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `PLUS (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Bang (
            trans_bang (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `AMP (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `TILDE (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Dot (
            trans_dot (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Custom_op (
            trans_custom_operator (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_as_operator ((kind, body) : mt) : CST.as_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `As (
            trans_as_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `As_quest (
            trans_as_quest (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `As_bang (
            trans_as_bang (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_multi_line_string_content ((kind, body) : mt) : CST.multi_line_string_content =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Multi_line_str_text (
            trans_multi_line_str_text (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Str_esca_char (
            trans_str_escaped_char (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `DQUOT (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_line_string_content ((kind, body) : mt) : CST.line_string_content =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Line_str_text (
            trans_line_str_text (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Str_esca_char (
            trans_str_escaped_char (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_bound_identifier ((kind, body) : mt) : CST.bound_identifier =
  match body with
  | Children v ->
      trans_simple_identifier (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_precedence_group_attribute ((kind, body) : mt) : CST.precedence_group_attribute =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_simple_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Simple_id (
                  trans_simple_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Bool_lit (
                  trans_boolean_literal (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_identifier ((kind, body) : mt) : CST.identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_simple_identifier (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_dot (Run.matcher_token v0),
                      trans_simple_identifier (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_navigation_suffix ((kind, body) : mt) : CST.navigation_suffix =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Dot_choice_simple_id (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_dot (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `Simple_id (
                        trans_simple_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Int_lit (
                        trans_integer_literal (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Dot_semg_ellips (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_dot (Run.matcher_token v0),
                  trans_semgrep_ellipsis (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_tuple_type_item_identifier ((kind, body) : mt) : CST.tuple_type_item_identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_wildcard_pattern (Run.matcher_token v))
              v0
            ,
            trans_simple_identifier (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_value_argument_label ((kind, body) : mt) : CST.value_argument_label =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Simple_id (
            trans_simple_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `If (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Switch (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_getter_specifier ((kind, body) : mt) : CST.getter_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_mutation_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_getter_effects (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_referenceable_operator ((kind, body) : mt) : CST.referenceable_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Custom_op (
            trans_custom_operator (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Comp_op (
            trans_comparison_operator (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Addi_op (
            trans_additive_operator (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Mult_op (
            trans_multiplicative_operator (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Equa_op (
            trans_equality_operator (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Assign_and_op (
            trans_assignment_and_operator (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `PLUSPLUS (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `DASHDASH (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Bang (
            trans_bang (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `TILDE (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `BAR (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `HAT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `LTLT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `GTGT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `AMP (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_precedence_group_attributes ((kind, body) : mt) : CST.precedence_group_attributes =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          trans_precedence_group_attribute (Run.matcher_token v)
        )
        v
  | Leaf _ -> assert false

let trans_availability_argument ((kind, body) : mt) : CST.availability_argument =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Id_int_lit_rep_DOT_int_lit (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_identifier (Run.matcher_token v0),
                  trans_integer_literal (Run.matcher_token v1),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_integer_literal (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v2
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `STAR (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_protocol_property_requirements ((kind, body) : mt) : CST.protocol_property_requirements =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Getter_spec (
                      trans_getter_specifier (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Setter_spec (
                      trans_setter_specifier (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_non_constructor_function_decl ((kind, body) : mt) : CST.non_constructor_function_decl =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Simple_id (
                  trans_simple_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Refe_op (
                  trans_referenceable_operator (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_precedence_group_declaration ((kind, body) : mt) : CST.precedence_group_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_simple_identifier (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v ->
                trans_precedence_group_attributes (Run.matcher_token v)
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_availability_condition ((kind, body) : mt) : CST.availability_condition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `HASH_8da4fa1 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `HASH_459dd9a (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_availability_argument (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_availability_argument (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_additive_expression ((kind, body) : mt) : CST.additive_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_additive_operator (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_annotated_inheritance_specifier ((kind, body) : mt) : CST.annotated_inheritance_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.repeat
              (fun v -> trans_attribute (Run.matcher_token v))
              v0
            ,
            trans_inheritance_specifier (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_literal ((kind, body) : mt) : CST.array_literal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_expression (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_expression (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_type ((kind, body) : mt) : CST.array_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_as_expression ((kind, body) : mt) : CST.as_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_as_operator (Run.matcher_token v1),
            trans_type_ (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_assignment ((kind, body) : mt) : CST.assignment =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_directly_assignable_expression (Run.matcher_token v0),
            trans_assignment_and_operator (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_associatedtype_declaration ((kind, body) : mt) : CST.associatedtype_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_simple_identifier (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v -> trans_type_constraints (Run.matcher_token v))
              v4
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_equal_sign (Run.matcher_token v0),
                      trans_type_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v5
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_attribute ((kind, body) : mt) : CST.attribute =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_user_type (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2; v3] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_attribute_argument (Run.matcher_token v1),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_attribute_argument (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v2
                      ,
                      Run.trans_token (Run.matcher_token v3)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_attribute_argument ((kind, body) : mt) : CST.attribute_argument =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Simple_id_COLON_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_simple_identifier (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exp (
            trans_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Rep1_simple_id_COLON (
            Run.repeat1
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_simple_identifier (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v
          )
      | Alt (3, v) ->
          `Rep1_simple_id_int_lit_rep_DOT_int_lit (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.repeat1
                    (fun v -> trans_simple_identifier (Run.matcher_token v))
                    v0
                  ,
                  trans_integer_literal (Run.matcher_token v1),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_integer_literal (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v2
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_await_expression ((kind, body) : mt) : CST.await_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_await_operator (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Call_exp (
                  trans_call_expression (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Tern_exp (
                  trans_ternary_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_basic_literal ((kind, body) : mt) : CST.basic_literal =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Int_lit (
            trans_integer_literal (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Hex_lit (
            trans_hex_literal (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Oct_lit (
            trans_oct_literal (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Bin_lit (
            trans_bin_literal (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Real_lit (
            trans_real_literal (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Bool_lit (
            trans_boolean_literal (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Str_lit (
            trans_string_literal (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Regex_lit (
            trans_regex_literal (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Nil (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binary_expression ((kind, body) : mt) : CST.binary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Mult_exp (
            trans_multiplicative_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Addi_exp (
            trans_additive_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Range_exp (
            trans_range_expression (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Infix_exp (
            trans_infix_expression (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Nil_coal_exp (
            trans_nil_coalescing_expression (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Check_exp (
            trans_check_expression (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Equa_exp (
            trans_equality_expression (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Comp_exp (
            trans_comparison_expression (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Conj_exp (
            trans_conjunction_expression (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Disj_exp (
            trans_disjunction_expression (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Bitw_oper (
            trans_bitwise_operation (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binding_kind_and_pattern ((kind, body) : mt) : CST.binding_kind_and_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_possibly_async_binding_pattern_kind (Run.matcher_token v0)
            ,
            trans_no_expr_pattern_already_bound (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binding_pattern ((kind, body) : mt) : CST.binding_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            trans_value_binding_pattern (Run.matcher_token v1),
            trans_no_expr_pattern_already_bound (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binding_pattern_no_expr ((kind, body) : mt) : CST.binding_pattern_no_expr =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Univ_allo_pat (
                  trans_universally_allowed_pattern (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Bind_pat (
                  trans_binding_pattern (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Bound_id (
                  trans_bound_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_quest (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binding_pattern_with_expr ((kind, body) : mt) : CST.binding_pattern_with_expr =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Univ_allo_pat (
                  trans_universally_allowed_pattern (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Bind_pat (
                  trans_binding_pattern (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_quest (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_bitwise_operation ((kind, body) : mt) : CST.bitwise_operation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_bitwise_binary_operator (Run.matcher_token v1),
            trans_expr_hack_at_ternary_binary_suffix (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_block ((kind, body) : mt) : CST.block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_statements (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_bodyless_function_declaration ((kind, body) : mt) : CST.bodyless_function_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            trans_modifierless_function_declaration_no_body (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_call_expression ((kind, body) : mt) : CST.call_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_call_suffix (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_call_suffix ((kind, body) : mt) : CST.call_suffix =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Value_args (
            trans_value_arguments (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Fn_call_lambda_args (
            trans_fn_call_lambda_arguments (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Value_args_fn_call_lambda_args (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_value_arguments (Run.matcher_token v0),
                  trans_fn_call_lambda_arguments (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_capture_list ((kind, body) : mt) : CST.capture_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_capture_list_item (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_capture_list_item (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_capture_list_item ((kind, body) : mt) : CST.capture_list_item =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Self_exp (
            trans_self_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Opt_owne_modi_simple_id_opt_equal_sign_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.opt
                    (fun v -> trans_ownership_modifier (Run.matcher_token v))
                    v0
                  ,
                  trans_simple_identifier (Run.matcher_token v1),
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_equal_sign (Run.matcher_token v0),
                            trans_expression (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v2
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_case_pattern ((kind, body) : mt) : CST.case_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> trans_user_type (Run.matcher_token v))
              v1
            ,
            trans_dot (Run.matcher_token v2),
            trans_simple_identifier (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_tuple_pattern (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_catch_block ((kind, body) : mt) : CST.catch_block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_catch_keyword (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_binding_pattern_no_expr (Run.matcher_token v)
              )
              v1
            ,
            Run.opt
              (fun v -> trans_where_clause (Run.matcher_token v))
              v2
            ,
            trans_block (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_check_expression ((kind, body) : mt) : CST.check_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_is_operator (Run.matcher_token v1),
            trans_type_ (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_body ((kind, body) : mt) : CST.class_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_class_member_declarations (Run.matcher_token v)
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_declaration ((kind, body) : mt) : CST.class_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            trans_modifierless_class_declaration (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_member_declarations ((kind, body) : mt) : CST.class_member_declarations =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_type_level_declaration (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_class_member_separator (Run.matcher_token v0),
                      trans_type_level_declaration (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v ->
                trans_class_member_separator (Run.matcher_token v)
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_comparison_expression ((kind, body) : mt) : CST.comparison_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_comparison_operator (Run.matcher_token v1),
            trans_expr_hack_at_ternary_binary_suffix (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_computed_getter ((kind, body) : mt) : CST.computed_getter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.repeat
              (fun v -> trans_attribute (Run.matcher_token v))
              v0
            ,
            trans_getter_specifier (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_block (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_computed_modify ((kind, body) : mt) : CST.computed_modify =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.repeat
              (fun v -> trans_attribute (Run.matcher_token v))
              v0
            ,
            trans_modify_specifier (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_block (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_computed_property ((kind, body) : mt) : CST.computed_property =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Opt_stmts (
                  Run.opt
                    (fun v -> trans_statements (Run.matcher_token v))
                    v
                )
            | Alt (1, v) ->
                `Rep_choice_comp_getter (
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Comp_getter (
                            trans_computed_getter (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Comp_setter (
                            trans_computed_setter (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Comp_modify (
                            trans_computed_modify (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_computed_setter ((kind, body) : mt) : CST.computed_setter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.repeat
              (fun v -> trans_attribute (Run.matcher_token v))
              v0
            ,
            trans_setter_specifier (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_simple_identifier (Run.matcher_token v1),
                      Run.trans_token (Run.matcher_token v2)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> trans_block (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_conjunction_expression ((kind, body) : mt) : CST.conjunction_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_conjunction_operator (Run.matcher_token v1),
            trans_expr_hack_at_ternary_binary_suffix (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constrained_type ((kind, body) : mt) : CST.constrained_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Unan_type_opt_DOT_simple_id_rep_DOT_simple_id (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_unannotated_type (Run.matcher_token v0),
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1; v2] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_simple_identifier (Run.matcher_token v1),
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      Run.trans_token (Run.matcher_token v0),
                                      trans_simple_identifier (Run.matcher_token v1)
                                    )
                                | _ -> assert false
                                )
                              )
                              v2
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constructor_expression ((kind, body) : mt) : CST.constructor_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Array_type (
                  trans_array_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Dict_type (
                  trans_dictionary_type (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `User_type (
                  trans_user_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_constructor_suffix (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constructor_suffix ((kind, body) : mt) : CST.constructor_suffix =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Cons_value_args (
            trans_constructor_value_arguments (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Fn_call_lambda_args (
            trans_fn_call_lambda_arguments (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Cons_value_args_fn_call_lambda_args (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_constructor_value_arguments (Run.matcher_token v0),
                  trans_fn_call_lambda_arguments (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constructor_value_arguments ((kind, body) : mt) : CST.constructor_value_arguments =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_value_argument (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_value_argument (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_control_transfer_statement ((kind, body) : mt) : CST.control_transfer_statement =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Throw_stmt (
            trans_throw_statement (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Opti_valu_cont_kw_opt_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_optionally_valueful_control_keyword (Run.matcher_token v0)
                  ,
                  Run.opt
                    (fun v -> trans_expression (Run.matcher_token v))
                    v1
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_deinit_declaration ((kind, body) : mt) : CST.deinit_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_function_body (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_deprecated_operator_declaration_body ((kind, body) : mt) : CST.deprecated_operator_declaration_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Simple_id (
                      trans_simple_identifier (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Basic_lit (
                      trans_basic_literal (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_dictionary_literal ((kind, body) : mt) : CST.dictionary_literal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `COLON (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Dict_lit_item_rep_COMMA_dict_lit_item (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_dictionary_literal_item (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  trans_dictionary_literal_item (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_dictionary_literal_item ((kind, body) : mt) : CST.dictionary_literal_item =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_dictionary_type ((kind, body) : mt) : CST.dictionary_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_type_ (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_didset_clause ((kind, body) : mt) : CST.didset_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_simple_identifier (Run.matcher_token v1),
                      Run.trans_token (Run.matcher_token v2)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            trans_block (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_direct_or_indirect_binding ((kind, body) : mt) : CST.direct_or_indirect_binding =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Bind_kind_and_pat (
                  trans_binding_kind_and_pattern (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Case_bind_pat_no_expr (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_binding_pattern_no_expr (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_type_annotation (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_directly_assignable_expression ((kind, body) : mt) : CST.directly_assignable_expression =
  match body with
  | Children v ->
      trans_expression (Run.matcher_token v)
  | Leaf _ -> assert false

and trans_disjunction_expression ((kind, body) : mt) : CST.disjunction_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_disjunction_operator (Run.matcher_token v1),
            trans_expr_hack_at_ternary_binary_suffix (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_do_statement ((kind, body) : mt) : CST.do_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_block (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_catch_block (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_else_options ((kind, body) : mt) : CST.else_options =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Blk (
            trans_block (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `If_stmt (
            trans_if_statement (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enum_class_body ((kind, body) : mt) : CST.enum_class_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Enum_entry (
                      trans_enum_entry (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Type_level_decl (
                      trans_type_level_declaration (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enum_entry ((kind, body) : mt) : CST.enum_entry =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_simple_identifier (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_enum_entry_suffix (Run.matcher_token v))
              v4
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_simple_identifier (Run.matcher_token v1),
                      Run.opt
                        (fun v -> trans_enum_entry_suffix (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v5
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v6
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enum_entry_suffix ((kind, body) : mt) : CST.enum_entry_suffix =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Enum_type_params (
            trans_enum_type_parameters (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Equal_sign_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_equal_sign (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enum_type_parameters ((kind, body) : mt) : CST.enum_type_parameters =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2; v3] ->
                    (
                      Run.opt
                        (fun v ->
                          (match v with
                          | Seq [v0; v1; v2] ->
                              (
                                Run.opt
                                  (fun v -> trans_wildcard_pattern (Run.matcher_token v))
                                  v0
                                ,
                                trans_simple_identifier (Run.matcher_token v1),
                                Run.trans_token (Run.matcher_token v2)
                              )
                          | _ -> assert false
                          )
                        )
                        v0
                      ,
                      trans_type_ (Run.matcher_token v1),
                      Run.opt
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                trans_equal_sign (Run.matcher_token v0),
                                trans_expression (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v2
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1; v2; v3] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                Run.opt
                                  (fun v ->
                                    (match v with
                                    | Seq [v0; v1; v2] ->
                                        (
                                          Run.opt
                                            (fun v -> trans_wildcard_pattern (Run.matcher_token v))
                                            v0
                                          ,
                                          trans_simple_identifier (Run.matcher_token v1),
                                          Run.trans_token (Run.matcher_token v2)
                                        )
                                    | _ -> assert false
                                    )
                                  )
                                  v1
                                ,
                                trans_type_ (Run.matcher_token v2),
                                Run.opt
                                  (fun v ->
                                    (match v with
                                    | Seq [v0; v1] ->
                                        (
                                          trans_equal_sign (Run.matcher_token v0),
                                          trans_expression (Run.matcher_token v1)
                                        )
                                    | _ -> assert false
                                    )
                                  )
                                  v3
                              )
                          | _ -> assert false
                          )
                        )
                        v3
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_equality_constraint ((kind, body) : mt) : CST.equality_constraint =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.repeat
              (fun v -> trans_attribute (Run.matcher_token v))
              v0
            ,
            trans_constrained_type (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Equal_sign (
                  trans_equal_sign (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Eq_eq (
                  trans_eq_eq (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_type_ (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_equality_expression ((kind, body) : mt) : CST.equality_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_equality_operator (Run.matcher_token v1),
            trans_expr_hack_at_ternary_binary_suffix (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_existential_type ((kind, body) : mt) : CST.existential_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_unannotated_type (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expr_hack_at_ternary_binary_call ((kind, body) : mt) : CST.expr_hack_at_ternary_binary_call =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_expr_hack_at_ternary_binary_call_suffix (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expr_hack_at_ternary_binary_call_suffix ((kind, body) : mt) : CST.expr_hack_at_ternary_binary_call_suffix =
  match body with
  | Children v ->
      trans_value_arguments (Run.matcher_token v)
  | Leaf _ -> assert false

and trans_expr_hack_at_ternary_binary_suffix ((kind, body) : mt) : CST.expr_hack_at_ternary_binary_suffix =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp (
            trans_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Expr_hack_at_tern_bin_call (
            trans_expr_hack_at_ternary_binary_call (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression ((kind, body) : mt) : CST.expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_simple_id (
            (match v with
            | Alt (0, v) ->
                `Simple_id (
                  trans_simple_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Un_exp (
                  trans_unary_expression (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Bin_exp (
                  trans_binary_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Tern_exp (
                  trans_ternary_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Prim_exp (
                  trans_primary_expression (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Switch_stmt (
                  trans_switch_statement (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Assign (
                  trans_assignment (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Value_param_pack (
                  trans_value_parameter_pack (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Value_pack_expa (
                  trans_value_pack_expansion (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Exp_imme_quest (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_expression (Run.matcher_token v0),
                        trans_immediate_quest (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Semg_exp_ellips (
            trans_semgrep_expression_ellipsis (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Semg_ellips_meta (
            trans_semgrep_ellipsis_metavar (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Semg_deep_ellips (
            trans_semgrep_deep_ellipsis (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression_with_willset_didset ((kind, body) : mt) : CST.expression_with_willset_didset =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_equal_sign (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            trans_willset_didset_block (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression_without_willset_didset ((kind, body) : mt) : CST.expression_without_willset_didset =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_equal_sign (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_fn_call_lambda_arguments ((kind, body) : mt) : CST.fn_call_lambda_arguments =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_lambda_literal (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_simple_identifier (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1),
                      trans_lambda_literal (Run.matcher_token v2)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_statement ((kind, body) : mt) : CST.for_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_try_operator (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_await_operator (Run.matcher_token v))
              v2
            ,
            trans_binding_pattern_no_expr (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_type_annotation (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5),
            trans_for_statement_collection (Run.matcher_token v6),
            Run.opt
              (fun v -> trans_where_clause (Run.matcher_token v))
              v7
            ,
            trans_block (Run.matcher_token v8)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_statement_await ((kind, body) : mt) : CST.for_statement_await =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_await_operator (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_statement_collection ((kind, body) : mt) : CST.for_statement_collection =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp (
            trans_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `For_stmt_await (
            trans_for_statement_await (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_body ((kind, body) : mt) : CST.function_body =
  match body with
  | Children v ->
      trans_block (Run.matcher_token v)
  | Leaf _ -> assert false

and trans_function_declaration ((kind, body) : mt) : CST.function_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_bodyless_function_declaration (Run.matcher_token v0),
            trans_function_body (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_type ((kind, body) : mt) : CST.function_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Tuple_type (
                  trans_tuple_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Unan_type (
                  trans_unannotated_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_async_keyword (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_throws (Run.matcher_token v))
              v2
            ,
            trans_arrow_operator (Run.matcher_token v3),
            trans_type_ (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_value_parameter ((kind, body) : mt) : CST.function_value_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v0
            ,
            trans_parameter (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_equal_sign (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_value_parameters ((kind, body) : mt) : CST.function_value_parameters =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Seq [v0; v1; v2] ->
              (
                Run.trans_token (Run.matcher_token v0),
                Run.opt
                  (fun v ->
                    (match v with
                    | Seq [v0; v1] ->
                        (
                          trans_function_value_parameter (Run.matcher_token v0),
                          Run.repeat
                            (fun v ->
                              (match v with
                              | Seq [v0; v1] ->
                                  (
                                    Run.trans_token (Run.matcher_token v0),
                                    trans_function_value_parameter (Run.matcher_token v1)
                                  )
                              | _ -> assert false
                              )
                            )
                            v1
                        )
                    | _ -> assert false
                    )
                  )
                  v1
                ,
                Run.trans_token (Run.matcher_token v2)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

and trans_guard_statement ((kind, body) : mt) : CST.guard_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_if_condition_sequence_item (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_if_condition_sequence_item (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            trans_else_ (Run.matcher_token v3),
            trans_block (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_if_condition_sequence_item ((kind, body) : mt) : CST.if_condition_sequence_item =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `If_let_bind (
            trans_if_let_binding (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Exp (
            trans_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Avai_cond (
            trans_availability_condition (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_if_let_binding ((kind, body) : mt) : CST.if_let_binding =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_direct_or_indirect_binding (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_equal_sign (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> trans_where_clause (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_if_statement ((kind, body) : mt) : CST.if_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_if_condition_sequence_item (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_if_condition_sequence_item (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            trans_block (Run.matcher_token v3),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_else_ (Run.matcher_token v0),
                      trans_else_options (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_import_declaration ((kind, body) : mt) : CST.import_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_import_kind (Run.matcher_token v))
              v2
            ,
            trans_identifier (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_infix_expression ((kind, body) : mt) : CST.infix_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_custom_operator (Run.matcher_token v1),
            trans_expr_hack_at_ternary_binary_suffix (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_inheritance_constraint ((kind, body) : mt) : CST.inheritance_constraint =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.repeat
              (fun v -> trans_attribute (Run.matcher_token v))
              v0
            ,
            trans_constrained_type (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_possibly_implicitly_unwrapped_type (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_inheritance_specifier ((kind, body) : mt) : CST.inheritance_specifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `User_type (
            trans_user_type (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Func_type (
            trans_function_type (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_inheritance_specifiers ((kind, body) : mt) : CST.inheritance_specifiers =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_annotated_inheritance_specifier (Run.matcher_token v0)
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `COMMA (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `AMP (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      trans_annotated_inheritance_specifier (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_init_declaration ((kind, body) : mt) : CST.init_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8; v9] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Quest (
                      trans_quest (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Bang (
                      trans_bang (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v4
            ,
            trans_function_value_parameters (Run.matcher_token v5),
            Run.opt
              (fun v -> trans_async_keyword (Run.matcher_token v))
              v6
            ,
            Run.opt
              (fun v -> trans_throws (Run.matcher_token v))
              v7
            ,
            Run.opt
              (fun v -> trans_type_constraints (Run.matcher_token v))
              v8
            ,
            Run.opt
              (fun v -> trans_function_body (Run.matcher_token v))
              v9
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_interpolation ((kind, body) : mt) : CST.interpolation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_interpolation_contents (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_interpolation_contents ((kind, body) : mt) : CST.interpolation_contents =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_value_argument (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_value_argument (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_key_path_component ((kind, body) : mt) : CST.key_path_component =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Simple_id_rep_key_path_postfs (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_simple_identifier (Run.matcher_token v0),
                  Run.repeat
                    (fun v -> trans_key_path_postfixes (Run.matcher_token v))
                    v1
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Rep1_key_path_postfs (
            Run.repeat1
              (fun v -> trans_key_path_postfixes (Run.matcher_token v))
              v
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_key_path_expression ((kind, body) : mt) : CST.key_path_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Simple_user_type (
                      trans_simple_user_type (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Array_type (
                      trans_array_type (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Dict_type (
                      trans_dictionary_type (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_key_path_component (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_key_path_postfixes ((kind, body) : mt) : CST.key_path_postfixes =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `QMARK (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Bang (
            trans_bang (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Self (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `LBRACK_opt_value_arg_rep_COMMA_value_arg_RBRACK (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_value_argument (Run.matcher_token v0),
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      Run.trans_token (Run.matcher_token v0),
                                      trans_value_argument (Run.matcher_token v1)
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_key_path_string_expression ((kind, body) : mt) : CST.key_path_string_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_labeled_statement ((kind, body) : mt) : CST.labeled_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_statement_label (Run.matcher_token v))
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Repeat_while_stmt (
                  trans_repeat_while_statement (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Do_stmt (
                  trans_do_statement (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Guard_stmt (
                  trans_guard_statement (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Switch_stmt (
                  trans_switch_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_lambda_function_type ((kind, body) : mt) : CST.lambda_function_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Lambda_func_type_params (
                  trans_lambda_function_type_parameters (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `LPAR_opt_lambda_func_type_params_RPAR (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.opt
                          (fun v ->
                            trans_lambda_function_type_parameters (Run.matcher_token v)
                          )
                          v1
                        ,
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_async_keyword (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_throws (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_arrow_operator (Run.matcher_token v0),
                      trans_possibly_implicitly_unwrapped_type (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_lambda_function_type_parameters ((kind, body) : mt) : CST.lambda_function_type_parameters =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_lambda_parameter (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_lambda_parameter (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_lambda_literal ((kind, body) : mt) : CST.lambda_literal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `LCURL (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `HATLCURL (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                trans_lambda_type_declaration (Run.matcher_token v)
              )
              v1
            ,
            Run.opt
              (fun v -> trans_statements (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_lambda_parameter ((kind, body) : mt) : CST.lambda_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Self_exp (
                  trans_self_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Simple_id (
                  trans_simple_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Opt_simple_id_simple_id_COLON_opt_param_modifs_poss_impl_unwr_type (
                  (match v with
                  | Seq [v0; v1; v2; v3; v4] ->
                      (
                        Run.opt
                          (fun v -> trans_simple_identifier (Run.matcher_token v))
                          v0
                        ,
                        trans_simple_identifier (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2),
                        Run.opt
                          (fun v -> trans_parameter_modifiers (Run.matcher_token v))
                          v3
                        ,
                        trans_possibly_implicitly_unwrapped_type (Run.matcher_token v4)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_lambda_type_declaration ((kind, body) : mt) : CST.lambda_type_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.repeat
              (fun v -> trans_attribute (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> trans_capture_list (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_lambda_function_type (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_line_string_literal ((kind, body) : mt) : CST.line_string_literal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Line_str_content (
                      trans_line_string_content (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Interp (
                      trans_interpolation (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_local_class_declaration ((kind, body) : mt) : CST.local_class_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v ->
                Run.repeat1
                  (fun v ->
                    (match v with
                    | Alt (0, v) ->
                        `Attr (
                          trans_attribute (Run.matcher_token v)
                        )
                    | Alt (1, v) ->
                        `Loca_perm_modi (
                          trans_locally_permitted_modifier (Run.matcher_token v)
                        )
                    | _ -> assert false
                    )
                  )
                  v
              )
              v0
            ,
            trans_modifierless_class_declaration (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_local_declaration ((kind, body) : mt) : CST.local_declaration =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Local_prop_decl (
            trans_local_property_declaration (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Local_typeas_decl (
            trans_local_typealias_declaration (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Local_func_decl (
            trans_local_function_declaration (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Local_class_decl (
            trans_local_class_declaration (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_local_function_declaration ((kind, body) : mt) : CST.local_function_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v ->
                Run.repeat1
                  (fun v ->
                    (match v with
                    | Alt (0, v) ->
                        `Attr (
                          trans_attribute (Run.matcher_token v)
                        )
                    | Alt (1, v) ->
                        `Loca_perm_modi (
                          trans_locally_permitted_modifier (Run.matcher_token v)
                        )
                    | _ -> assert false
                    )
                  )
                  v
              )
              v0
            ,
            trans_modifierless_function_declaration (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_local_property_declaration ((kind, body) : mt) : CST.local_property_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v ->
                Run.repeat1
                  (fun v ->
                    (match v with
                    | Alt (0, v) ->
                        `Attr (
                          trans_attribute (Run.matcher_token v)
                        )
                    | Alt (1, v) ->
                        `Loca_perm_modi (
                          trans_locally_permitted_modifier (Run.matcher_token v)
                        )
                    | _ -> assert false
                    )
                  )
                  v
              )
              v0
            ,
            trans_modifierless_property_declaration (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_local_statement ((kind, body) : mt) : CST.local_statement =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp (
            trans_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Local_decl (
            trans_local_declaration (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Labe_stmt (
            trans_labeled_statement (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Cont_tran_stmt (
            trans_control_transfer_statement (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_local_typealias_declaration ((kind, body) : mt) : CST.local_typealias_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v ->
                Run.repeat1
                  (fun v ->
                    (match v with
                    | Alt (0, v) ->
                        `Attr (
                          trans_attribute (Run.matcher_token v)
                        )
                    | Alt (1, v) ->
                        `Loca_perm_modi (
                          trans_locally_permitted_modifier (Run.matcher_token v)
                        )
                    | _ -> assert false
                    )
                  )
                  v
              )
              v0
            ,
            trans_modifierless_typealias_declaration (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_metatype ((kind, body) : mt) : CST.metatype =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_unannotated_type (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Type (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Prot (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_modifierless_class_declaration ((kind, body) : mt) : CST.modifierless_class_declaration =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_class_simple_id_opt_type_params_opt_COLON_inhe_specis_opt_type_consts_class_body (
            (match v with
            | Seq [v0; v1; v2; v3; v4; v5] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Class (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Struct (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Actor (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_simple_identifier (Run.matcher_token v1),
                  Run.opt
                    (fun v -> trans_type_parameters (Run.matcher_token v))
                    v2
                  ,
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_inheritance_specifiers (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v3
                  ,
                  Run.opt
                    (fun v -> trans_type_constraints (Run.matcher_token v))
                    v4
                  ,
                  trans_class_body (Run.matcher_token v5)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exte_unan_type_opt_type_params_opt_COLON_inhe_specis_opt_type_consts_class_body (
            (match v with
            | Seq [v0; v1; v2; v3; v4; v5] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_unannotated_type (Run.matcher_token v1),
                  Run.opt
                    (fun v -> trans_type_parameters (Run.matcher_token v))
                    v2
                  ,
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_inheritance_specifiers (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v3
                  ,
                  Run.opt
                    (fun v -> trans_type_constraints (Run.matcher_token v))
                    v4
                  ,
                  trans_class_body (Run.matcher_token v5)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Opt_indi_enum_simple_id_opt_type_params_opt_COLON_inhe_specis_opt_type_consts_enum_class_body (
            (match v with
            | Seq [v0; v1; v2; v3; v4; v5; v6] ->
                (
                  Run.opt
                    (fun v -> Run.trans_token (Run.matcher_token v))
                    v0
                  ,
                  Run.trans_token (Run.matcher_token v1),
                  trans_simple_identifier (Run.matcher_token v2),
                  Run.opt
                    (fun v -> trans_type_parameters (Run.matcher_token v))
                    v3
                  ,
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_inheritance_specifiers (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v4
                  ,
                  Run.opt
                    (fun v -> trans_type_constraints (Run.matcher_token v))
                    v5
                  ,
                  trans_enum_class_body (Run.matcher_token v6)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_modifierless_function_declaration ((kind, body) : mt) : CST.modifierless_function_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_modifierless_function_declaration_no_body (Run.matcher_token v0)
            ,
            trans_function_body (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_modifierless_function_declaration_no_body ((kind, body) : mt) : CST.modifierless_function_declaration_no_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            trans_non_constructor_function_decl (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v1
            ,
            trans_function_value_parameters (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_async_keyword (Run.matcher_token v))
              v3
            ,
            Run.opt
              (fun v -> trans_throws (Run.matcher_token v))
              v4
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_arrow_operator (Run.matcher_token v0),
                      trans_possibly_implicitly_unwrapped_type (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v5
            ,
            Run.opt
              (fun v -> trans_type_constraints (Run.matcher_token v))
              v6
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_modifierless_property_declaration ((kind, body) : mt) : CST.modifierless_property_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_possibly_async_binding_pattern_kind (Run.matcher_token v0)
            ,
            trans_single_modifierless_property_declaration (Run.matcher_token v1)
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_single_modifierless_property_declaration (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_modifierless_typealias_declaration ((kind, body) : mt) : CST.modifierless_typealias_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_simple_identifier (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v2
            ,
            trans_equal_sign (Run.matcher_token v3),
            trans_type_ (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_modifiers ((kind, body) : mt) : CST.modifiers =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Non_local_scope_modi (
                trans_non_local_scope_modifier (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `Rep1_choice_attr (
                Run.repeat1
                  (fun v ->
                    (match v with
                    | Alt (0, v) ->
                        `Attr (
                          trans_attribute (Run.matcher_token v)
                        )
                    | Alt (1, v) ->
                        `Loca_perm_modi (
                          trans_locally_permitted_modifier (Run.matcher_token v)
                        )
                    | _ -> assert false
                    )
                  )
                  v
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

and trans_multi_line_string_literal ((kind, body) : mt) : CST.multi_line_string_literal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Multi_line_str_content (
                      trans_multi_line_string_content (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Interp (
                      trans_interpolation (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_multiplicative_expression ((kind, body) : mt) : CST.multiplicative_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_multiplicative_operator (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_navigable_type_expression ((kind, body) : mt) : CST.navigable_type_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `User_type (
            trans_user_type (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Array_type (
            trans_array_type (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Dict_type (
            trans_dictionary_type (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_navigation_expression ((kind, body) : mt) : CST.navigation_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Navi_type_exp (
                  trans_navigable_type_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Paren_type (
                  trans_parenthesized_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_navigation_suffix (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_nil_coalescing_expression ((kind, body) : mt) : CST.nil_coalescing_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_nil_coalescing_operator (Run.matcher_token v1),
            trans_expr_hack_at_ternary_binary_suffix (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_no_expr_pattern_already_bound ((kind, body) : mt) : CST.no_expr_pattern_already_bound =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Univ_allo_pat (
                  trans_universally_allowed_pattern (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Bound_id (
                  trans_bound_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_quest (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_opaque_type ((kind, body) : mt) : CST.opaque_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_unannotated_type (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_open_end_range_expression ((kind, body) : mt) : CST.open_end_range_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_three_dot_operator (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_open_start_range_expression ((kind, body) : mt) : CST.open_start_range_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_range_operator (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_operator_declaration ((kind, body) : mt) : CST.operator_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Prefix (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Infix (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Post (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_referenceable_operator (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_simple_identifier (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v ->
                trans_deprecated_operator_declaration_body (Run.matcher_token v)
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_optional_type ((kind, body) : mt) : CST.optional_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `User_type (
                  trans_user_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Tuple_type (
                  trans_tuple_type (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Array_type (
                  trans_array_type (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Dict_type (
                  trans_dictionary_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat1
              (fun v -> trans_immediate_quest (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parameter ((kind, body) : mt) : CST.parameter =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Opt_simple_id_simple_id_COLON_opt_param_modifs_poss_impl_unwr_type_opt_three_dot_op (
            (match v with
            | Seq [v0; v1; v2; v3; v4; v5] ->
                (
                  Run.opt
                    (fun v -> trans_simple_identifier (Run.matcher_token v))
                    v0
                  ,
                  trans_simple_identifier (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2),
                  Run.opt
                    (fun v -> trans_parameter_modifiers (Run.matcher_token v))
                    v3
                  ,
                  trans_possibly_implicitly_unwrapped_type (Run.matcher_token v4)
                  ,
                  Run.opt
                    (fun v -> trans_three_dot_operator (Run.matcher_token v))
                    v5
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Semg_ellips (
            trans_semgrep_ellipsis (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Semg_ellips_meta (
            trans_semgrep_ellipsis_metavar (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_type ((kind, body) : mt) : CST.parenthesized_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Opaque_type (
                  trans_opaque_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exis_type (
                  trans_existential_type (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Dict_type (
                  trans_dictionary_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_playground_literal ((kind, body) : mt) : CST.playground_literal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `HASH_38ce0d0 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `HASH_34ae46a (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `HASH_71f9c0e (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_simple_identifier (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_expression (Run.matcher_token v4),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1; v2; v3] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_simple_identifier (Run.matcher_token v1),
                      Run.trans_token (Run.matcher_token v2),
                      trans_expression (Run.matcher_token v3)
                    )
                | _ -> assert false
                )
              )
              v5
            ,
            Run.trans_token (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_possibly_implicitly_unwrapped_type ((kind, body) : mt) : CST.possibly_implicitly_unwrapped_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_type_ (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_imm_tok_bang (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_postfix_expression ((kind, body) : mt) : CST.postfix_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_postfix_unary_operator (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_prefix_expression ((kind, body) : mt) : CST.prefix_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_prefix_unary_operator (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_async (
                  (match v with
                  | Alt (0, v) ->
                      `Async (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `If (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Switch (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_primary_expression ((kind, body) : mt) : CST.primary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Tuple_exp (
            trans_tuple_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Basic_lit (
            trans_basic_literal (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Lambda_lit (
            trans_lambda_literal (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Spec_lit (
            trans_special_literal (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Play_lit (
            trans_playground_literal (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Array_lit (
            trans_array_literal (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Dict_lit (
            trans_dictionary_literal (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Self_exp (
            trans_self_expression (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Super_exp (
            trans_super_expression (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Try_exp (
            trans_try_expression (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Await_exp (
            trans_await_expression (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Refe_op (
            trans_referenceable_operator (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Key_path_exp (
            trans_key_path_expression (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `Key_path_str_exp (
            trans_key_path_string_expression (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `Three_dot_op (
            trans_three_dot_operator (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_property_declaration ((kind, body) : mt) : CST.property_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            trans_modifierless_property_declaration (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_protocol_body ((kind, body) : mt) : CST.protocol_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_protocol_member_declarations (Run.matcher_token v)
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_protocol_composition_type ((kind, body) : mt) : CST.protocol_composition_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_unannotated_type (Run.matcher_token v0),
            Run.repeat1
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_unannotated_type (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_protocol_declaration ((kind, body) : mt) : CST.protocol_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_simple_identifier (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v3
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_inheritance_specifiers (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.opt
              (fun v -> trans_type_constraints (Run.matcher_token v))
              v5
            ,
            trans_protocol_body (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_protocol_member_declaration ((kind, body) : mt) : CST.protocol_member_declaration =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Body_func_decl_opt_func_body (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_bodyless_function_declaration (Run.matcher_token v0),
                  Run.opt
                    (fun v -> trans_function_body (Run.matcher_token v))
                    v1
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Init_decl (
            trans_init_declaration (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Deinit_decl (
            trans_deinit_declaration (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Prot_prop_decl (
            trans_protocol_property_declaration (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Typeas_decl (
            trans_typealias_declaration (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Asso_decl (
            trans_associatedtype_declaration (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Subs_decl (
            trans_subscript_declaration (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_protocol_member_declarations ((kind, body) : mt) : CST.protocol_member_declarations =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_protocol_member_declaration (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_semi (Run.matcher_token v0),
                      trans_protocol_member_declaration (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> trans_semi (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_protocol_property_declaration ((kind, body) : mt) : CST.protocol_property_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            trans_binding_kind_and_pattern (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_type_annotation (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> trans_type_constraints (Run.matcher_token v))
              v3
            ,
            trans_protocol_property_requirements (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_range_expression ((kind, body) : mt) : CST.range_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_range_operator (Run.matcher_token v1),
            trans_expr_hack_at_ternary_binary_suffix (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_raw_str_interpolation ((kind, body) : mt) : CST.raw_str_interpolation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_raw_str_interpolation_start (Run.matcher_token v0),
            trans_interpolation_contents (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_raw_string_literal ((kind, body) : mt) : CST.raw_string_literal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_raw_str_part (Run.matcher_token v0),
                      trans_raw_str_interpolation (Run.matcher_token v1),
                      Run.opt
                        (fun v ->
                          trans_raw_str_continuing_indicator (Run.matcher_token v)
                        )
                        v2
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            trans_raw_str_end_part (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_repeat_while_statement ((kind, body) : mt) : CST.repeat_while_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_statements (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            Run.repeat
              (fun v -> trans_implicit_semi (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5),
            trans_if_condition_sequence_item (Run.matcher_token v6),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_if_condition_sequence_item (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v7
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_selector_expression ((kind, body) : mt) : CST.selector_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Gett (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Sett (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            trans_expression (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_semgrep_deep_ellipsis ((kind, body) : mt) : CST.semgrep_deep_ellipsis =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            trans_custom_operator (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_simple_user_type ((kind, body) : mt) : CST.simple_user_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_simple_identifier (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_type_arguments (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_single_modifierless_property_declaration ((kind, body) : mt) : CST.single_modifierless_property_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_no_expr_pattern_already_bound (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_type_annotation (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_type_constraints (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp_with_will_didset_6031240 (
                      trans_expression_with_willset_didset (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Exp_with_will_didset_3bae343 (
                      trans_expression_without_willset_didset (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Will_didset_blk (
                      trans_willset_didset_block (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Comp_prop (
                      trans_computed_property (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_statements ((kind, body) : mt) : CST.statements =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_local_statement (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_semi (Run.matcher_token v0),
                      trans_local_statement (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> trans_semi (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_string_literal ((kind, body) : mt) : CST.string_literal =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Line_str_lit (
            trans_line_string_literal (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Multi_line_str_lit (
            trans_multi_line_string_literal (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Raw_str_lit (
            trans_raw_string_literal (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_subscript_declaration ((kind, body) : mt) : CST.subscript_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v2
            ,
            trans_function_value_parameters (Run.matcher_token v3),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_arrow_operator (Run.matcher_token v0),
                      trans_possibly_implicitly_unwrapped_type (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.opt
              (fun v -> trans_type_constraints (Run.matcher_token v))
              v5
            ,
            trans_computed_property (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_switch_entry ((kind, body) : mt) : CST.switch_entry =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Case_switch_pat_opt_where_kw_exp_rep_COMMA_switch_pat (
                  (match v with
                  | Seq [v0; v1; v2; v3] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_switch_pattern (Run.matcher_token v1),
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  trans_where_keyword (Run.matcher_token v0),
                                  trans_expression (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v2
                        ,
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  trans_switch_pattern (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v3
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Defa_kw (
                  trans_default_keyword (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_statements (Run.matcher_token v3),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_switch_pattern ((kind, body) : mt) : CST.switch_pattern =
  match body with
  | Children v ->
      trans_binding_pattern_with_expr (Run.matcher_token v)
  | Leaf _ -> assert false

and trans_switch_statement ((kind, body) : mt) : CST.switch_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v -> trans_switch_entry (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_ternary_expression ((kind, body) : mt) : CST.ternary_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_quest (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_expr_hack_at_ternary_binary_suffix (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_throw_statement ((kind, body) : mt) : CST.throw_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_throw_keyword (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_try_expression ((kind, body) : mt) : CST.try_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_try_operator (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Bin_exp (
                  trans_binary_expression (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Call_exp (
                  trans_call_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Tern_exp (
                  trans_ternary_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_expression ((kind, body) : mt) : CST.tuple_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_simple_identifier (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_expression (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      Run.opt
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                trans_simple_identifier (Run.matcher_token v0),
                                Run.trans_token (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      trans_expression (Run.matcher_token v2)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_pattern ((kind, body) : mt) : CST.tuple_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_tuple_pattern_item (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_tuple_pattern_item (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_pattern_item ((kind, body) : mt) : CST.tuple_pattern_item =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Simple_id_COLON_bind_pat_with_expr (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_simple_identifier (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_binding_pattern_with_expr (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Bind_pat_with_expr (
            trans_binding_pattern_with_expr (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_type ((kind, body) : mt) : CST.tuple_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `LPAR_opt_tuple_type_item_rep_COMMA_tuple_type_item_RPAR (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_tuple_type_item (Run.matcher_token v0),
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      Run.trans_token (Run.matcher_token v0),
                                      trans_tuple_type_item (Run.matcher_token v1)
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Paren_type (
            trans_parenthesized_type (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_type_item ((kind, body) : mt) : CST.tuple_type_item =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v ->
                trans_tuple_type_item_identifier (Run.matcher_token v)
              )
              v0
            ,
            Run.opt
              (fun v -> trans_parameter_modifiers (Run.matcher_token v))
              v1
            ,
            trans_type_ (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_ ((kind, body) : mt) : CST.type_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Opt_type_modifs_unan_type (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.opt
                    (fun v -> trans_type_modifiers (Run.matcher_token v))
                    v0
                  ,
                  trans_unannotated_type (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Semg_ellips (
            trans_semgrep_ellipsis (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_annotation ((kind, body) : mt) : CST.type_annotation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_possibly_implicitly_unwrapped_type (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_arguments ((kind, body) : mt) : CST.type_arguments =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_casting_pattern ((kind, body) : mt) : CST.type_casting_pattern =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Is_type (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_type_ (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Bind_pat_no_expr_as_type (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_binding_pattern_no_expr (Run.matcher_token v0),
                  trans_as_ (Run.matcher_token v1),
                  trans_type_ (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_constraint ((kind, body) : mt) : CST.type_constraint =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Inhe_cons (
            trans_inheritance_constraint (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Equa_cons (
            trans_equality_constraint (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_constraints ((kind, body) : mt) : CST.type_constraints =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_where_keyword (Run.matcher_token v0),
            trans_type_constraint (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_constraint (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_level_declaration ((kind, body) : mt) : CST.type_level_declaration =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_import_decl (
            (match v with
            | Alt (0, v) ->
                `Import_decl (
                  trans_import_declaration (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Prop_decl (
                  trans_property_declaration (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Typeas_decl (
                  trans_typealias_declaration (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func_decl (
                  trans_function_declaration (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Init_decl (
                  trans_init_declaration (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Class_decl (
                  trans_class_declaration (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Prot_decl (
                  trans_protocol_declaration (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Deinit_decl (
                  trans_deinit_declaration (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Subs_decl (
                  trans_subscript_declaration (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Op_decl (
                  trans_operator_declaration (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Prec_group_decl (
                  trans_precedence_group_declaration (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Asso_decl (
                  trans_associatedtype_declaration (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Semg_ellips (
            trans_semgrep_ellipsis (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_modifiers ((kind, body) : mt) : CST.type_modifiers =
  match body with
  | Children v ->
      Run.repeat1
        (fun v -> trans_attribute (Run.matcher_token v))
        v
  | Leaf _ -> assert false

and trans_type_pack_expansion ((kind, body) : mt) : CST.type_pack_expansion =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_unannotated_type (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_parameter ((kind, body) : mt) : CST.type_parameter =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Opt_type_param_modifs_type_param_poss_packed_opt_COLON_type (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.opt
                    (fun v ->
                      trans_type_parameter_modifiers (Run.matcher_token v)
                    )
                    v0
                  ,
                  trans_type_parameter_possibly_packed (Run.matcher_token v1),
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_type_ (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v2
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Semg_ellips (
            trans_semgrep_ellipsis (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_parameter_modifiers ((kind, body) : mt) : CST.type_parameter_modifiers =
  match body with
  | Children v ->
      Run.repeat1
        (fun v -> trans_attribute (Run.matcher_token v))
        v
  | Leaf _ -> assert false

and trans_type_parameter_pack ((kind, body) : mt) : CST.type_parameter_pack =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_unannotated_type (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_parameter_possibly_packed ((kind, body) : mt) : CST.type_parameter_possibly_packed =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Simple_id (
            trans_simple_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Type_param_pack (
            trans_type_parameter_pack (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_parameters ((kind, body) : mt) : CST.type_parameters =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_parameter (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_parameter (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> trans_type_constraints (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_typealias_declaration ((kind, body) : mt) : CST.typealias_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            trans_modifierless_typealias_declaration (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unannotated_type ((kind, body) : mt) : CST.unannotated_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `User_type (
            trans_user_type (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Tuple_type (
            trans_tuple_type (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Func_type (
            trans_function_type (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Array_type (
            trans_array_type (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Dict_type (
            trans_dictionary_type (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Opt_type (
            trans_optional_type (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Meta (
            trans_metatype (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Opaque_type (
            trans_opaque_type (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Exis_type (
            trans_existential_type (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Prot_comp_type (
            trans_protocol_composition_type (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Type_param_pack (
            trans_type_parameter_pack (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Type_pack_expa (
            trans_type_pack_expansion (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unary_expression ((kind, body) : mt) : CST.unary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Post_exp (
            trans_postfix_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Call_exp (
            trans_call_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Cons_exp (
            trans_constructor_expression (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Navi_exp (
            trans_navigation_expression (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Prefix_exp (
            trans_prefix_expression (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `As_exp (
            trans_as_expression (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Sele_exp (
            trans_selector_expression (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Open_start_range_exp (
            trans_open_start_range_expression (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Open_end_range_exp (
            trans_open_end_range_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_universally_allowed_pattern ((kind, body) : mt) : CST.universally_allowed_pattern =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Wild_pat (
            trans_wildcard_pattern (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Tuple_pat (
            trans_tuple_pattern (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Type_cast_pat (
            trans_type_casting_pattern (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Case_pat (
            trans_case_pattern (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_user_type ((kind, body) : mt) : CST.user_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_simple_user_type (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_dot (Run.matcher_token v0),
                      trans_simple_user_type (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_value_argument ((kind, body) : mt) : CST.value_argument =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_type_modifiers (Run.matcher_token v))
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Rep1_value_arg_label_COLON (
                  Run.repeat1
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_value_argument_label (Run.matcher_token v0),
                            Run.trans_token (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v
                )
            | Alt (1, v) ->
                `Opt_value_arg_label_COLON_exp (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  trans_value_argument_label (Run.matcher_token v0),
                                  Run.trans_token (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v0
                        ,
                        trans_expression (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_value_arguments ((kind, body) : mt) : CST.value_arguments =
  match body with
  | Children v ->
      (match v with
      | Seq [v0] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `LPAR_opt_value_arg_rep_COMMA_value_arg_RPAR (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  trans_value_argument (Run.matcher_token v0),
                                  Run.repeat
                                    (fun v ->
                                      (match v with
                                      | Seq [v0; v1] ->
                                          (
                                            Run.trans_token (Run.matcher_token v0),
                                            trans_value_argument (Run.matcher_token v1)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                    v1
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `LBRACK_opt_value_arg_rep_COMMA_value_arg_RBRACK (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  trans_value_argument (Run.matcher_token v0),
                                  Run.repeat
                                    (fun v ->
                                      (match v with
                                      | Seq [v0; v1] ->
                                          (
                                            Run.trans_token (Run.matcher_token v0),
                                            trans_value_argument (Run.matcher_token v1)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                    v1
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_value_pack_expansion ((kind, body) : mt) : CST.value_pack_expansion =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_value_parameter_pack ((kind, body) : mt) : CST.value_parameter_pack =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_where_clause ((kind, body) : mt) : CST.where_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_where_keyword (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_while_statement ((kind, body) : mt) : CST.while_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_if_condition_sequence_item (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_if_condition_sequence_item (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_statements (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_willset_clause ((kind, body) : mt) : CST.willset_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_simple_identifier (Run.matcher_token v1),
                      Run.trans_token (Run.matcher_token v2)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            trans_block (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_willset_didset_block ((kind, body) : mt) : CST.willset_didset_block =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `LCURL_will_clause_opt_didset_clause_RCURL (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_willset_clause (Run.matcher_token v1),
                  Run.opt
                    (fun v -> trans_didset_clause (Run.matcher_token v))
                    v2
                  ,
                  Run.trans_token (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `LCURL_didset_clause_opt_will_clause_RCURL (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_didset_clause (Run.matcher_token v1),
                  Run.opt
                    (fun v -> trans_willset_clause (Run.matcher_token v))
                    v2
                  ,
                  Run.trans_token (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_external_macro_definition ((kind, body) : mt) : CST.external_macro_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_value_arguments (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_macro_signature ((kind, body) : mt) : CST.macro_signature =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_function_value_parameters (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_arrow_operator (Run.matcher_token v0),
                      trans_unannotated_type (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_macro_head ((kind, body) : mt) : CST.macro_head =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_macro_definition ((kind, body) : mt) : CST.macro_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_equal_sign (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte_macro_defi (
                  trans_external_macro_definition (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_macro_declaration ((kind, body) : mt) : CST.macro_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            trans_macro_head (Run.matcher_token v0),
            trans_simple_identifier (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v2
            ,
            trans_macro_signature (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_macro_definition (Run.matcher_token v))
              v4
            ,
            Run.opt
              (fun v -> trans_type_constraints (Run.matcher_token v))
              v5
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_global_declaration ((kind, body) : mt) : CST.global_declaration =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Import_decl (
            trans_import_declaration (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Prop_decl (
            trans_property_declaration (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Typeas_decl (
            trans_typealias_declaration (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Func_decl (
            trans_function_declaration (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Init_decl (
            trans_init_declaration (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Class_decl (
            trans_class_declaration (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Prot_decl (
            trans_protocol_declaration (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Op_decl (
            trans_operator_declaration (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Prec_group_decl (
            trans_precedence_group_declaration (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Asso_decl (
            trans_associatedtype_declaration (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Macro_decl (
            trans_macro_declaration (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_top_level_statement ((kind, body) : mt) : CST.top_level_statement =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp (
            trans_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Global_decl (
            trans_global_declaration (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Labe_stmt (
            trans_labeled_statement (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Throw_stmt (
            trans_throw_statement (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_source_file ((kind, body) : mt) : CST.source_file =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_shebang_line (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_top_level_statement (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                trans_semi (Run.matcher_token v0),
                                trans_top_level_statement (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> trans_semi (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

(*
   Costly operation that translates a whole tree or subtree.

   The first pass translates it into a generic tree structure suitable
   to guess which node corresponds to each grammar rule.
   The second pass is a translation into a typed tree where each grammar
   node has its own type.

   This function is called:
   - once on the root of the program after removing extras
     (comments and other nodes that occur anywhere independently from
     the grammar);
   - once of each extra node, resulting in its own independent tree of type
     'extra'.
*)
let translate_tree src node trans_x =
  let matched_tree = Run.match_tree children_regexps src node in
  Option.map trans_x matched_tree


let translate_extra src (node : Tree_sitter_output_t.node) : CST.extra option =
  match node.type_ with
  | "comment" ->
      (match translate_tree src node trans_comment with
      | None -> None
      | Some x -> Some (`Comment (Run.get_loc node, x)))
  | "multiline_comment" ->
      (match translate_tree src node trans_multiline_comment with
      | None -> None
      | Some x -> Some (`Multiline_comment (Run.get_loc node, x)))
  | "directive" ->
      (match translate_tree src node trans_directive with
      | None -> None
      | Some x -> Some (`Directive (Run.get_loc node, x)))
  | "diagnostic" ->
      (match translate_tree src node trans_diagnostic with
      | None -> None
      | Some x -> Some (`Diagnostic (Run.get_loc node, x)))
  | _ -> None

let translate_root src root_node =
  translate_tree src root_node trans_source_file

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let opt_program, extras =
     Run.translate
       ~extras
       ~translate_root:(translate_root src)
       ~translate_extra:(translate_extra src)
       orig_root_node
  in
  Parsing_result.create src opt_program extras errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

